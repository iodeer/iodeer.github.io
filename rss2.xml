<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>小丁的小屋</title>
    <link>http://yoursite.com/</link>
    
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>最美的相遇，不言过往；最好的离别，不问归期。</description>
    <pubDate>Mon, 12 Jul 2021 16:01:52 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>串</title>
      <link>http://yoursite.com/posts/58d9577e/</link>
      <guid>http://yoursite.com/posts/58d9577e/</guid>
      <pubDate>Mon, 12 Jul 2021 15:44:28 GMT</pubDate>
      <description>
      
        字符串的基本概念，模式匹配
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p><strong>定义：</strong>即<font color='red'>字符串</font>，是由零个或多个<font color='red'>字符</font>组成的有限序列。一般标记为 S = “    a xx sda an”。</p><ul><li>其中 S是<font color='red'>串名</font>，</li><li>字符的个数n称为<font color='red'>串的长度</font><ul><li>n = 0时的串称为<font color='red'>空串</font>。</li></ul></li></ul><p><strong>术语</strong></p><ul><li>子串：串中任意多个<font color='red'>连续的</font>字符组成的的子序列称为该串的子串。<ul><li>空串也是字串</li></ul></li><li>主串：包含子串的串。</li><li>字符在主串中的位置：字符在串中的序号，<strong>从1开始</strong>。</li><li>字串在主串中的位置：字串在第一个字符在主串中的位置。<strong>从1开始</strong></li><li>空格串：由一个或多个空格组成的串，长度是串中空格字符的个数，<strong>空格串不是空串</strong>。</li></ul><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><p>串的逻辑结构和线性表极为相似，区别仅在于<strong>串的数据对象限定为字符集</strong>，<strong>基本操作对象通常是以<font color='red'>字串</font>作为操作对象</strong>。</p><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">StrAssign(&amp;T , chars): 赋值操作。把串T赋值给chars</span><br><span class="line">StrCopy(&amp;T, S): 复制操作。由串S复制得到串T。</span><br><span class="line">StrEmpty(S): 判空操作。若S为空串，则返回True，否则返回False。</span><br><span class="line">StrLength(S): 求串长。返回串S的元素个数。</span><br><span class="line">ClearString(&amp;S): 求空操作。将S清为空串。</span><br><span class="line">DestroyString(&amp;S): 销毁串。将串S销毁(回收存储空间).</span><br><span class="line">Concat(&amp;S,S1,S2): 串联结。用T返回由S1和S2链接而成的新串。</span><br><span class="line">SubString(&amp;Sub,S,pos,len):求子串。用Sub返回串S的第pos个字符起长度为len的子串。</span><br><span class="line">Index(S,T): 定位操作。若主串S中存在与串T值相同的子串，则返回它在主串S中第一次出现的位置；否则函数值为0.</span><br><span class="line">StrCompare(S,T):比较操作，若S&gt;T,则返回值&gt;0;若S&#x3D;T,则返回值&#x3D;0； 若S&lt;T,则返回值&lt;0.</span><br></pre></td></tr></table></figure><h2 id="存储结构"><a href="#存储结构" class="headerlink" title="存储结构"></a>存储结构</h2><p><strong>定长顺序存储—结构体定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLEN 255<span class="comment">//预定义最长串长为255</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> ch[MAXLEN];<span class="comment">//每个分量存储一个字符,静态数组</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//串的实际长度</span></span><br><span class="line">&#125;SString;</span><br><span class="line"><span class="comment">//为了使数组的下标与串的位置相等，数组从下标1开始。ch[0]是空的</span></span><br></pre></td></tr></table></figure><p><strong>堆分配存储—结构体定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAXLEN 255<span class="comment">//预定义最长串长为255</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> *ch;<span class="comment">//按串长分配存储区。ch指向串的基地址。</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//串的长度</span></span><br><span class="line">&#125;HString;<span class="comment">//动态数组实现，堆分配实现</span></span><br><span class="line"></span><br><span class="line">HString S;</span><br><span class="line">S.ch = (<span class="keyword">char</span> *) <span class="built_in">malloc</span>(MAXLEN * <span class="keyword">sizeof</span>(<span class="keyword">char</span>));<span class="comment">//需要手动free</span></span><br><span class="line">S-&gt;length = <span class="number">0</span>;</span><br></pre></td></tr></table></figure><p><strong>链式存储——结构体定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StringNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> ch;<span class="comment">//每个结点存1个字符</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">StringNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;StringNode,* <span class="keyword">String</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">char类型一个字节，struct StringNode * 占四个字节</span></span><br><span class="line"><span class="comment">这样的结构体存储密度低。</span></span><br><span class="line"><span class="comment">为了改进该存储结构，提高存储密度，我们把每个结构体存储的数据提高</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">StringNode</span>&#123;</span></span><br><span class="line">    <span class="keyword">char</span> ch[<span class="number">4</span>];<span class="comment">//每个结点存1个字符</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">StringNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;StringNode,* <span class="keyword">String</span>;</span><br></pre></td></tr></table></figure><h2 id="基本操作（基于静态数组）"><a href="#基本操作（基于静态数组）" class="headerlink" title="基本操作（基于静态数组）"></a>基本操作（基于静态数组）</h2><p><strong>求子串</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubString(&amp;Sub,S,pos,len):求子串。用Sub返回串S的第pos个字符起长度为len的子串。</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">SubString</span><span class="params">(SString &amp;Sub,SString S,<span class="keyword">int</span> pos,<span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="comment">//子串范围越界</span></span><br><span class="line">    <span class="keyword">if</span>(pos + len <span class="number">-1</span> &gt; S.length)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = pos; i &lt; pos + len; i++)&#123;</span><br><span class="line">        Sub.ch[i - pos + <span class="number">1</span>] = S.ch[i];</span><br><span class="line">        Sub.length = len;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>串比较</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//StrCompare(S,T):比较操作，若S&gt;T,则返回值&gt;0;若S=T,则返回值=0； 若S&lt;T,则返回值&lt;0.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">StrCompare</span><span class="params">(SString S,SString T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= S.length &amp;&amp; i&lt;=T.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i] != T.ch[i])</span><br><span class="line">            <span class="keyword">return</span> S.ch[i] - T.ch[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//扫描过的所有字符都相同，则长度长的串更大</span></span><br><span class="line">    <span class="keyword">return</span> S.length - T.length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>定位操作</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Index(S,T): 定位操作。若主串S中存在与串T值相同的子串，则返回它在主串S中第一次出现的位置；否则函数值为0.</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">int</span><span class="params">(SString S,SString T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n = StrLength(S),m = StrLength(T);</span><br><span class="line">    SString sub;<span class="comment">//用于暂存子串</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= n-m+<span class="number">1</span>)&#123;</span><br><span class="line">        SubString(sub, S, i,m);</span><br><span class="line">        <span class="keyword">if</span>(StrCompare(sub,T) != <span class="number">0</span>) i++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> i ;<span class="comment">//返回子串在主串中的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//S中不存在与T相等的子串。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h2><p><strong>定义：</strong>在主串中找到与模式串相同的子串，并返回其所在位置。</p><ul><li>子串：主串的一部分，一定存在。</li><li>模式串：不一定能在主串中找到。</li></ul><h3 id="朴素模式匹配算法"><a href="#朴素模式匹配算法" class="headerlink" title="朴素模式匹配算法"></a>朴素模式匹配算法</h3><ul><li><p><strong><font color='red'>暴力求解</font></strong></p></li><li><p>假定<strong>主串长度为n，模式串长度为m</strong></p></li><li><p>概念：将主串中<strong><font color='red'>所有长度为m的子串依次与模式串对比</font></strong>，直到找到一个完全匹配的子串，或者所有子串都不匹配。</p><ul><li>最多有<strong>n-m+1</strong>个子串</li></ul></li><li><p><strong>最坏时间复杂度：O(nm)</strong></p><p><strong>最好时间复杂度：O(n)</strong></p></li></ul><p><strong>代码实现</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用基本操作实现算法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">int</span><span class="params">(SString S,SString T)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> n = StrLength(S),m = StrLength(T);</span><br><span class="line">    SString sub;<span class="comment">//用于暂存子串</span></span><br><span class="line">    <span class="keyword">while</span>(i &lt;= n-m+<span class="number">1</span>)&#123;<span class="comment">//最多对比n-m+1个子串</span></span><br><span class="line">        SubString(sub, S, i,m);</span><br><span class="line">        <span class="keyword">if</span>(StrCompare(sub,T) != <span class="number">0</span>) i++;<span class="comment">//如果不匹配，就尝试匹配下一个子串</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> i ;<span class="comment">//返回子串在主串中的位置</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//S中不存在与T相等的子串，匹配失败。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不使用基本操作实现算法</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">int</span><span class="params">(SString S,SString T)</span></span>&#123;</span><br><span class="line">  <span class="keyword">int</span> i = <span class="number">1</span>,j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= S.length &amp;&amp; j &lt;= T.length)&#123;</span><br><span class="line">        <span class="keyword">if</span>(S.ch[i] == T.ch[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;<span class="comment">//子串匹配比较</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;<span class="comment">//匹配失败，指针后退重新开始匹配</span></span><br><span class="line">            i = i - j + <span class="number">2</span> ;</span><br><span class="line">            j = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j &gt; T.length) <span class="comment">//匹配成功</span></span><br><span class="line">        <span class="keyword">return</span> i-T.length;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><ul><li><strong><font color='red'>最坏时间复杂度 O(m+n)</font></strong><ul><li><strong>next数组时间复杂度：O(m)</strong></li><li><strong>模式匹配过程最坏时间复杂度：O(n)   //主串不回溯</strong></li></ul></li></ul><h4 id="手算next数组"><a href="#手算next数组" class="headerlink" title="手算next数组"></a>手算next数组</h4><ul><li><strong><font color='red'>next[1]都无脑写0</font></strong></li><li><strong><font color='red'>next[2]都无脑写1</font></strong></li><li><strong><font color='red'>其他next</font></strong>：在不匹配的位置前，划一根分界限，模式串一步一步往后退，<strong>直到分界线之前“能对上”，或者模式串完全跨越分界线为止</strong>。此时j指向哪里，next数组就是多少。</li></ul><p><strong>代码实现</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//next[] 当匹配失败时，j指针需要回溯到多少位</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Index_KMP</span><span class="params">(SString S,SString T,<span class="keyword">int</span> next[])</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">1</span>,j = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt;= S.length &amp;&amp; j &lt; T.length)&#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">        1、当j==0时，也就是在匹配过程中，模式串和子串第一个字符就匹配失败，需要换下一个子串并且模式串的指针后退到第一个字符的位置，但在next数组中，对于以上的情况，把j设置为0，所有我们碰到j==0时，我们需要把j++，并且i++，与匹配成功时的操作相同。</span></span><br><span class="line"><span class="comment">        2、子串和模式串的某一字符匹配成功时，移动到下一个字符，进行匹配，直到完全匹配或者匹配失败的全款</span></span><br><span class="line"><span class="comment">        **/</span></span><br><span class="line">        <span class="keyword">if</span>(j == <span class="number">0</span> || S.ch[i] == T.ch[j])&#123;</span><br><span class="line">            i++;</span><br><span class="line">            j++;<span class="comment">//继续比较后面的字符</span></span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            j = next[j];<span class="comment">//匹配失败时，主串指针i不回溯，模式串指针向右移动</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j &gt; T.length) <span class="comment">//匹配成功</span></span><br><span class="line">        <span class="keyword">return</span> i-T.length;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/posts/58d9577e/#disqus_thread</comments>
    </item>
    
    <item>
      <title>特殊矩阵</title>
      <link>http://yoursite.com/posts/2fce5ec8/</link>
      <guid>http://yoursite.com/posts/2fce5ec8/</guid>
      <pubDate>Mon, 12 Jul 2021 15:44:28 GMT</pubDate>
      <description>
      
        几种特殊矩阵的基本概念
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="普通矩阵的存储"><a href="#普通矩阵的存储" class="headerlink" title="普通矩阵的存储"></a>普通矩阵的存储</h3><ul><li>可以<font color='orange'>用二维数组</font>存储。</li><li>注意：描述矩阵元素时，<font color='red'>行列号通常从1开始</font>；而描述数组时通常下标从0开始。（具体看题目给的条件，注意审题）</li></ul><h3 id="对称矩阵"><a href="#对称矩阵" class="headerlink" title="对称矩阵"></a><strong>对称矩阵</strong></h3><p><strong>概念：</strong>若n阶<font color='orange'>方针</font>中任意一个元素a i,j 都有<font color='orange'> a[i] [j] = a[j] [i]</font>，则该矩阵为<font color='orange'>对称矩阵</font>。</p><p><strong>压缩存储策略：只存储主对角线 + 下三角区</strong></p><ul><li>按<font color='orange'>行优先</font>原则将各个元素存入一维数组中。</li><li>数组大小应该为：*<em>((n+1)</em>n)/2 **</li><li>在使用的时候，我们可以实现一个“映射”函数：<strong><font color='red'>矩阵下标 —&gt; 一位数组下标</font></strong><ul><li>按<font color='orange'>行优先</font>原则,a i j是第 (i * (i - 1))/2 + j 个元素，在数组中的下标是第<font color='red'> (i * (i - 1))/2 + j - 1</font>个位置。</li></ul></li></ul><h3 id="三角矩阵"><a href="#三角矩阵" class="headerlink" title="三角矩阵"></a>三角矩阵</h3><ul><li><font color='orange'>下三角矩阵</font>：除了主对角线和下三角区，其余的元素都相同。</li><li><font color='orange'>上三角矩阵</font>：除了主对角线和上三角区，其余的元素都相同。</li></ul><p><strong>压缩存储策略</strong></p><ul><li>按<font color='orange'>行优先</font>原则将橙色区元素存入一维数组中。并在<font color='orange'>最后一个位置存储常量c</font></li><li>数组大小应该为：<strong>((n+1)*n)/2  + 1</strong></li><li>在使用的时候，我们可以实现一个“映射”函数：<strong><font color='red'>矩阵下标 —&gt; 一位数组下标</font></strong>.<ul><li>按<font color='orange'>行优先</font>原则,a i j是第 (i * (i - 1))/2 + j 个元素，在数组中的下标是第<font color='red'> (i * (i - 1))/2 + j - 1</font>个位置。</li><li>如果 i &lt; j 则x = a[*<em>((n+1)</em>n)/2];</li></ul></li></ul><h3 id="三对角矩阵的压缩存储"><a href="#三对角矩阵的压缩存储" class="headerlink" title="三对角矩阵的压缩存储"></a>三对角矩阵的压缩存储</h3><p><strong>概念：</strong>当<font color='orange'>| i - j| &gt; 1 时，有a i j = 0;</font></p><p><strong>压缩存储策略</strong>：</p><ul><li><p>按<font color='orange'>行优先</font>原则，只存储带状部分</p></li><li><p>数组大小：3n - 2 </p></li><li><p>在使用的时候，我们可以实现一个“映射”函数：<strong><font color='red'>矩阵下标 —&gt; 一位数组下标</font></strong>.</p><ul><li><p>i j差值大于 1  则 x = 0;</p></li><li><p>前面i-1行共有 3（i-1）-1 个元素</p><p>a i j 是第i行 第j - i +2个元素</p><p>a i j 是第2i + j  - 2个元素</p></li></ul></li></ul><h3 id="稀疏矩阵"><a href="#稀疏矩阵" class="headerlink" title="稀疏矩阵"></a>稀疏矩阵</h3><p><strong>概念：</strong>非零元素远远少于矩阵元素的个数</p><p><strong>压缩存储策略</strong></p><ul><li>顺序存储 ——三元组【行，列 ，值】，只存储非零数。<ul><li>失去随机存取的特性</li></ul></li><li>链式存储——十字链表法</li></ul><h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><ul><li>存储上三角、下三角。</li><li>行优先、列优先。</li><li>矩阵元素的下标从0？1？开始</li><li>数组下标从0？1？开始</li></ul>]]></content:encoded>
      
      <comments>http://yoursite.com/posts/2fce5ec8/#disqus_thread</comments>
    </item>
    
    <item>
      <title>队列</title>
      <link>http://yoursite.com/posts/b6c47025/</link>
      <guid>http://yoursite.com/posts/b6c47025/</guid>
      <pubDate>Mon, 12 Jul 2021 15:44:28 GMT</pubDate>
      <description>
      
        队列、存储结构的基本概念极其应用
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><strong>队列</strong>是<strong><font color='orange'>只允许在一端进行插入，在另一端删除</font></strong>的<font color='red'>线性表</font>。</li><li><strong>特点：先进先出（FIFO）</strong></li></ul><p><strong>术语</strong></p><ul><li>队头：允许删除元素的一端</li><li>队尾：允许插入元素的一端</li><li>空队列：</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">InitQueue(&amp;Q): 初始化队列，构造一个空队列Q.</span><br><span class="line">DestroyQueue(&amp;Q): 销毁队列。销毁并释放队列Q所占用的内存空间</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EnQueue(&amp;Q,x): 入队。若队列Q未满，将x加入，⑩之成为新的队尾。</span><br><span class="line">DeQueue(&amp;Q,&amp;x): 出队。若队列Q未满，删除对头元素，并用x返回。</span><br><span class="line"></span><br><span class="line">GetHead(Q,&amp;x): 读队头元素。若队列Q非空，则将队头元素赋值给x。</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><ul><li>要判断清楚rear指向的是最后一个元素还是最后一个元素的下一个位置</li><li>确定判空的条件<ul><li>牺牲一个存储单元——循环队列</li><li>增加size变量记录队列长度</li><li>增加tag = 0/1用于标记最近的一次操作 出队/入队</li></ul></li></ul><h2 id="队列的顺序存储"><a href="#队列的顺序存储" class="headerlink" title="队列的顺序存储"></a>队列的顺序存储</h2><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><p><strong>结构体定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10<span class="comment">//定义队列中元素的最大个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data[MaxSize];<span class="comment">//用静态数组存放队列元素</span></span><br><span class="line">    <span class="keyword">int</span> front,rear;<span class="comment">//队头指针和队尾指针</span></span><br><span class="line">    <span class="comment">//这里front指向队头元素，rear指向队尾元素的下一个位置 </span></span><br><span class="line">&#125; SqQueue;<span class="comment">//</span></span><br></pre></td></tr></table></figure><p><strong>初始化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化队列</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化时，队头、队尾指针指向0；</span></span><br><span class="line">    Q.front = Q.rear = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判空</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">QueueEmpty</span><span class="params">(SqQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front == Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>入队</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入队，只能从队尾入队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q,ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(队列已满)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//队满则报错</span></span><br><span class="line">    Q.data[Q.rear] = x;<span class="comment">//将x插入队尾</span></span><br><span class="line">    Q.rear = Q.rear + <span class="number">1</span>;<span class="comment">//队尾指针后移</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>查询元素</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得队头元素的值，用x返回</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetHead</span><span class="params">(SqQueue Q,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.rear == Q.front)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x = Q.data[Q.front];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><h4 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h4><p><strong>入队</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//入队，只能从队尾入队</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">EnQueue</span><span class="params">(SqQueue &amp;Q,ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>( (Q.rear+<span class="number">1</span>) % MaxSize == Q.front)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//队满则报错</span></span><br><span class="line">    Q.data[Q.rear] = x;<span class="comment">//将x插入队尾</span></span><br><span class="line">    Q.rear = (Q.rear + <span class="number">1</span>)%MaxSize;<span class="comment">//队尾指针加一取模</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>出队</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出队（删除一个队头元素，并用x返回）</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(SqQueue &amp;Q,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.rear == Q.front)<span class="comment">//判断队空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x = Q.data(Q.front);</span><br><span class="line">    Q.front = (Q,front + <span class="number">1</span>)%MaxSize;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>队列中元素中的个数：(Q.rear - Q.front + MaxSize ) %MaxSize;</li></ul><h2 id="队列的链式存储"><a href="#队列的链式存储" class="headerlink" title="队列的链式存储"></a>队列的链式存储</h2><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><ul><li>后插法</li></ul><h5 id="基本操作-3"><a href="#基本操作-3" class="headerlink" title="基本操作"></a>基本操作</h5><p><strong>结构体定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span>&#123;</span><span class="comment">//链式队列结点</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LinkNode</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span><span class="comment">//链式队列</span></span><br><span class="line">    LinkNode *front , *rear;<span class="comment">//队列的队头和队尾指针</span></span><br><span class="line">&#125;LinkQueue;</span><br></pre></td></tr></table></figure><p><strong>初始化（带头结点）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化队列(带头结点)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化时，front、rear都指向头结点</span></span><br><span class="line">    Q.front = Q.rear = (LinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    Q.front -&gt; next = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判空(带头结点)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断队列是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(LinkQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front == Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span> </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>入队(带头结点)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新元素入队</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q,ElemType x)</span></span>&#123;</span><br><span class="line">    LinkNode *s = (LinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    s.next = <span class="literal">NULL</span>;</span><br><span class="line">    s.data = x;</span><br><span class="line">    Q.rear-&gt;next = s;<span class="comment">//新结点插入到rear之后</span></span><br><span class="line">    Q.rear = s;<span class="comment">//修改表尾指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>出队（带头结点）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//队头元素出队，不带头结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front == Q.rear)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//空队</span></span><br><span class="line">    LinkNode *p = Q.front-&gt;next;</span><br><span class="line">    x = p.data;<span class="comment">//用变量x返回队头元素</span></span><br><span class="line">    Q.front-&gt;next = p.next;<span class="comment">//修改头结点的next指针</span></span><br><span class="line">    <span class="keyword">if</span>(Q.rear == p)<span class="comment">//若此次是最后一个结点出队，则需要修改rear指针</span></span><br><span class="line">        Q.rear = Q.front;</span><br><span class="line">    <span class="built_in">free</span>(p);<span class="comment">//释放结点空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>初始化(不带头结点)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitQueue</span><span class="params">(LinkQueue &amp;Q)</span></span>&#123;</span><br><span class="line">    <span class="comment">//初始化时，front、rear都指向NULL</span></span><br><span class="line">    Q.front = <span class="literal">NULL</span>;</span><br><span class="line">    Q.rear = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判空（不带头结点）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断队列是否为空(不带头结点)</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">IsEmpty</span><span class="params">(LinkQueue Q)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>入队(不带头结点)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新元素入队,不带头结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">EnQueue</span><span class="params">(LinkQueue &amp;Q,ElemType x)</span></span>&#123;</span><br><span class="line">    LinkNode *s = (LinkNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">    s-&gt;data = x;</span><br><span class="line">    s-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(Q.rear == <span class="literal">NULL</span>)&#123;<span class="comment">//不带头结点的队列，第一个元素入队时需要特别处理</span></span><br><span class="line">        Q.front = s;<span class="comment">//修改队头队尾指针</span></span><br><span class="line">        Q.rear = s;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        Q.rear-&gt;next = s;<span class="comment">//新结点插入到rear之后</span></span><br><span class="line">    Q.rear = s;<span class="comment">//修改表尾指针</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>出队(不带头结点)</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//队头元素出队(不带头结点)</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeQueue</span><span class="params">(LinkQueue &amp;Q,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(Q.front == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//空队</span></span><br><span class="line">    LinkNode *p = Q.front;<span class="comment">//p指向此次出队的结点</span></span><br><span class="line">    x = p-&gt;data;<span class="comment">//用变量x返回队头元素</span></span><br><span class="line">    Q.front = p-&gt;next;<span class="comment">//修改front指针</span></span><br><span class="line">    <span class="keyword">if</span>(Q.rear == p)&#123;<span class="comment">//此次是最后一个结点出队，出对后则队列为空队列</span></span><br><span class="line">        Q.front = <span class="literal">NULL</span>;</span><br><span class="line">    Q.rear = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);<span class="comment">//释放空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h2><h3 id="概念-2"><a href="#概念-2" class="headerlink" title="概念"></a>概念</h3><ul><li>允许从<font color='red'>两端插入、两端删除</font>的线性表</li></ul><p><strong>输入受限的双端队列：</strong>只允许从<font color='red'>一端插入、两端删除</font>的线性表。</p><p><strong>输入受限的双端队列：</strong>只允许从<font color='red'>两端插入、一端删除</font>的线性表。</p><p><strong><font color='red'>在栈中合法的输出序列，在双端队列中必定合法</font></strong></p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="树的层次遍历"><a href="#树的层次遍历" class="headerlink" title="树的层次遍历"></a>树的层次遍历</h3><h3 id="图的广度优先遍历"><a href="#图的广度优先遍历" class="headerlink" title="图的广度优先遍历"></a>图的广度优先遍历</h3>]]></content:encoded>
      
      <comments>http://yoursite.com/posts/b6c47025/#disqus_thread</comments>
    </item>
    
    <item>
      <title>栈</title>
      <link>http://yoursite.com/posts/1f4ac2fb/</link>
      <guid>http://yoursite.com/posts/1f4ac2fb/</guid>
      <pubDate>Mon, 12 Jul 2021 15:44:28 GMT</pubDate>
      <description>
      
        栈、顺序栈、链栈的基本概念极其应用
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h3><ul><li><font color='red'>只允许在一端进行或删除操作</font>的<font color='orange'>线性表</font>.</li><li>重要术语<ul><li>栈顶：允许插入和删除的一端——栈顶元素</li><li>栈底：不允许插入和删除的一端——栈底元素</li><li>空栈</li></ul></li><li>特点：<strong>后进先出</strong></li><li>数学特性：n各不同的元素出栈，出栈元素不同排列的个数为1/(1+n) * Cn(2n)。</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">InitStack(&amp;S):初始化栈。构造一个空栈S,分配内存空间;</span><br><span class="line">DestroyStack(&amp;L):销毁栈销毁并释放栈S所占用的内存空间;</span><br><span class="line"></span><br><span class="line">Push(&amp;S,x):进栈若栈S未满，则将x加入使之成为新栈顶;</span><br><span class="line">Pop(&amp;S,&amp;x):出栈若栈S非空，则弹出栈顶元素，并用x返回;</span><br><span class="line"></span><br><span class="line">GetTop(S,&amp;x):读取栈顶元素。若栈S非空，则用x返回栈顶元素</span><br><span class="line"></span><br><span class="line">其他常用操作：</span><br><span class="line">StackEmpty(S):判断一个栈S是否为空。若S为空，则返回true,否则返回false；</span><br></pre></td></tr></table></figure><h2 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h2><h3 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h3><p><strong>顺序存储类型定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 50<span class="comment">//定义栈中元素的最大个数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data[MaxSize];<span class="comment">//静态数组存放栈中元素</span></span><br><span class="line">    <span class="keyword">int</span> top;<span class="comment">//栈顶指针</span></span><br><span class="line">&#125;SqStack;</span><br></pre></td></tr></table></figure><p><strong>初始化栈</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">IniStack</span><span class="params">(SqStack &amp;S)</span></span>&#123;</span><br><span class="line">    S.top = <span class="number">-1</span>;<span class="comment">//初始化栈顶指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>栈空</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断栈空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">StackEmpty</span><span class="params">(SqStack S)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top == <span class="number">-1</span>)<span class="comment">//栈空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//不空</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>进栈</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新元素进栈</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Push</span><span class="params">(SqStack &amp;S,ElemType x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top == MaxSize<span class="number">-1</span>)<span class="comment">//栈满，报错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    S,top = S.top + <span class="number">1</span>;<span class="comment">//指针先加1</span></span><br><span class="line">    S.data[S.top] = x;<span class="comment">//新元素入栈</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>出栈</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//出栈操作</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Pop</span><span class="params">(SqStack &amp;S,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top == <span class="number">-1</span>)<span class="comment">//栈空，报错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x = S.data[S.top];<span class="comment">//栈顶元素先出栈</span></span><br><span class="line">    S.top = S.top - <span class="number">1</span>;<span class="comment">//指针在减1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这里的数据删除只是逻辑上被删除了，在内存中还存在。</span></span><br></pre></td></tr></table></figure><p><strong>读取</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//读取栈顶元素</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">GetTop</span><span class="params">(SqStack S,ElemType &amp;x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(S.top == <span class="number">-1</span>)<span class="comment">//栈空，报错</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    x = S.data[S.top];<span class="comment">//x记录栈顶元素</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//与删除操作相比，读取操作只是少了指针减1的步骤。</span></span><br></pre></td></tr></table></figure><h3 id="共享栈"><a href="#共享栈" class="headerlink" title="共享栈"></a>共享栈</h3><p><strong>定义</strong>：两个栈<font color='red'>共享</font>同一片空间</p><h4 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h4><p><strong>结构体定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MaxSize 10;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType data[MaxSize];</span><br><span class="line">    <span class="keyword">int</span> top0;<span class="comment">//0号栈栈顶指针</span></span><br><span class="line">    <span class="keyword">int</span> top1;<span class="comment">//1号栈栈顶指针</span></span><br><span class="line">&#125;ShStack;</span><br></pre></td></tr></table></figure><p><strong>初始化栈</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化栈</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitStack</span><span class="params">(ShStack &amp;S)</span></span>&#123;</span><br><span class="line">    S.top0 = <span class="number">-1</span>;<span class="comment">//初始化栈顶指针</span></span><br><span class="line">    S.top1 = MaxSize;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>栈满</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FullStack</span><span class="params">(ShStack &amp;S)</span></span>&#123;</span><br><span class="line">    S.top0 +<span class="number">1</span> = S.top1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>更加有效的利用存储空间。</li><li>只有当整个存储空间被占满时才发生上溢，减少发生上溢的可能性。</li><li>对存取效率没有什么影响</li></ul><h2 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul><li>链栈的操作与链表类似，<strong>入栈和出栈的操作都在链表的表头进行，头插法</strong></li></ul><h3 id="基本操作-3"><a href="#基本操作-3" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Linknode</span>&#123;</span></span><br><span class="line">    ElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Linknode</span> *<span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125; *LiStack;<span class="comment">//栈类型定义</span></span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="括号匹配"><a href="#括号匹配" class="headerlink" title="括号匹配"></a>括号匹配</h3><p>最后出现的左括号<strong>最先</strong>被匹配<font color='red'>（LIFO）</font>。</p><h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><h4 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h4><p><strong>中缀表达式</strong></p><ul><li>运算符在操作数之间<ul><li>eg：a + b</li><li>a + b - c</li><li>a + b - c  * d</li></ul></li></ul><p><strong><font color='red'>后缀表达式</font></strong></p><ul><li>运算符在操作数后面<ul><li>eg： a b +</li><li>a b + c -</li><li>a b +  c d *  - </li></ul></li><li><strong>左优先原则：只要左边的运算符都能先计算，就优先算左边的。</strong></li><li>注意：先弹出的元素是<strong>右操作数</strong></li></ul><p><strong>前缀表达式</strong></p><ul><li>运算符在操作数前面<ul><li>eg: + a b</li><li>-+a b c </li></ul></li><li><strong>右优先原则：只要右边的运算符都能先计算，就优先算右边的</strong></li><li>注意：先弹出的元素是<strong>左操作数</strong></li></ul><h4 id="中缀表达式转后缀表达式"><a href="#中缀表达式转后缀表达式" class="headerlink" title="中缀表达式转后缀表达式"></a>中缀表达式转后缀表达式</h4><p><strong>手算过程</strong></p><ul><li>确定中缀表达式中的<font color='red'>各个运算符的运算顺序</font>。</li><li>选择下一个运算符，按照<font color='orange'>【左操作数  右操作数 运算符】</font>的方式组合成一个新的操作数。<ul><li>这里由于运算顺序不唯一，因此对应的后缀表达式也不唯一。由于不唯一破坏了算法的确定性，为此我们确定了<strong>左优先原则</strong>。保证后缀表达式唯一。</li></ul></li><li>如果还有运算符没被处理，就继续第二步。</li></ul><p><strong>计算过程</strong></p><ul><li>初始化一个栈，用于保存<font color='red'>暂时还不能确定运算顺序的运算符</font>。</li><li>从左到右处理各个元素，直到末尾。可能遇到三种情况：<ul><li>遇到<font color='red'>操作数</font>。直接加入后缀表达式。</li><li>遇到<font color='red'>界定符</font>。遇到“ ( ”直接入栈；遇到“ ）”则依次弹出栈内运算符并加入后缀表达式，直到弹出“（ ”为止。<font color='cornflowerblue'>注意“ ( ”不加入后缀表达式</font>.</li><li>遇到<font color='red'>运算符</font>。依次弹出栈中<font color='orange'>优先级高于或等于</font>当前运算符的所有运算符，并加入后缀表达式，若碰到”（ “或栈空则停止。之前再把当权运算符入栈。</li></ul></li><li>按上述方法处理完所有字符后，将栈中剩余运算符依次弹出，并加入后缀表达式。</li></ul><h4 id="后缀表达式的计算"><a href="#后缀表达式的计算" class="headerlink" title="后缀表达式的计算"></a>后缀表达式的计算</h4><p><strong>手算过程</strong></p><ul><li>从左往右扫描，每遇到一个运算符，就让<font color='orange'>运算符前面的两个操作数</font>执行对应运算，<font color='orange'>合体为一个操作数</font>。</li></ul><p><strong>计算过程</strong></p><ul><li>从左往右扫描下一个元素，直到处理完所有元素。</li><li>若扫描到<font color='orange'>操作数则压入栈</font>,并回到上一步，否则执行下一步。</li><li>若扫到操作数，则弹出两个栈顶元素，<font color='red'>先弹出的栈顶元素为右操作数</font>，执行对应运算，运算结果压回到栈顶，回到第一步。</li></ul><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul><li>适合“递归”算法：可以把原始问题转换成<font color='red'>属性相同</font>，但<font color='red'>规模较小</font>的问题</li></ul>]]></content:encoded>
      
      <comments>http://yoursite.com/posts/1f4ac2fb/#disqus_thread</comments>
    </item>
    
    <item>
      <title>线性表</title>
      <link>http://yoursite.com/posts/40f24371/</link>
      <guid>http://yoursite.com/posts/40f24371/</guid>
      <pubDate>Tue, 29 Jun 2021 10:00:39 GMT</pubDate>
      <description>
      
        顺序表、链表的操作以及两者不同点
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="定义（逻辑结构）"><a href="#定义（逻辑结构）" class="headerlink" title="定义（逻辑结构）"></a>定义（逻辑结构）</h3><p>线性表是具有<font color='cornflowerblue'>相同</font>数据类型的n（n≥0）个<font color='red'>数据元素</font>的<font color='red'>有限序列</font>，其中n为<font color='red'>表长</font>，当n = 0时，线性表是一个<font color='red'>空表</font>。若用L命名线性表，则一般表示为：L = (a1,a2,….,ai,ai+1….,an)。</p><ul><li>相同数据类型：每个数据元素所占用的空间一样大。</li><li>序列：有次序。</li><li>有限：数据元素是有限的，如若“所有的整数按递增次序排列，并<font color='red'>不是线性表</font>”。</li><li>描述线性表时，角标是从1开始的</li><li>ai是线性表中“第i个”元素线性表中的<font color='red'>位序</font>，<strong>从1开始</strong></li><li>a1是<font color='red'>表头元素</font>，an是<font color='red'>表尾元素</font>。</li></ul><p><strong>线性表的逻辑特性：除了第一个元素之外，每一个元素有且仅有一个直接前驱。除最后一个元素外，每一个元素有且仅有一个直接后驱</strong></p><h3 id="为什么要实现数据结构的操作"><a href="#为什么要实现数据结构的操作" class="headerlink" title="为什么要实现数据结构的操作"></a>为什么要实现数据结构的操作</h3><ul><li>团队合作编程，你定义的数据结构要让别人能够很方便的使用（封装）</li><li>将常用的操作/运算封装成函数，避免重复工作，降低出错的风险</li></ul><h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">   初始化表 InitList(&amp;L)</span><br><span class="line">   销毁表 DestoryList(&amp;L)</span><br><span class="line">   插入  ListInsert(&amp;L,i,e)</span><br><span class="line">删除  Listdelete(&amp;L,i,&amp;e)</span><br><span class="line">   按值查找LocateElem(L,e)</span><br><span class="line">   按位查找GetElem(L,i)</span><br><span class="line">   表长 Length(L)</span><br><span class="line">   输出操作 PrintList(L)</span><br><span class="line">   判空操作 Empty(L)</span><br></pre></td></tr></table></figure><h3 id="物理结构"><a href="#物理结构" class="headerlink" title="物理结构"></a>物理结构</h3><h3 id="代码问题"><a href="#代码问题" class="headerlink" title="代码问题"></a>代码问题</h3><ul><li>如何判空</li><li>如何判断结点是否在表尾或者表头结点<ul><li>后向/前向遍历的实现核心</li></ul></li><li>如何在表头、表中、表尾插入/删除一个结点<ul><li>插入、删除操作的不易错思路</li></ul></li></ul><h2 id="顺序表（顺序存储）"><a href="#顺序表（顺序存储）" class="headerlink" title="顺序表（顺序存储）"></a>顺序表（顺序存储）</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p><strong>顺序表</strong>——用<font color='red'>顺序存储</font>的方式实现线性表</p><p>顺序存储:把<font color='red'>逻辑上响铃</font>的元素存储在<font color='red'>物理位置上也相邻</font>的存储单元中，元素之间的关系由存储单元的邻接关系来体现</p><h3 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h3><ul><li><p>静态分配</p><ul><li>静态分配的实现下，如果数组存满了——》放弃治疗，顺序表的表长刚开始就已经确定了，无法更改。</li></ul></li><li><p>动态分配</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxSize = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    ElemType *data;<span class="comment">//指示动态分配数组的指针</span></span><br><span class="line">    <span class="keyword">int</span> MaxSize;<span class="comment">//顺序表的最大容量</span></span><br><span class="line">    <span class="keyword">int</span> length;    <span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList; <span class="comment">//顺序表的类型定义</span></span><br><span class="line"><span class="comment">// new delete</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ol><li><strong>随机访问</strong>：即可以在O(1)时间内找到第i个元素</li><li><strong>存储密度高</strong>：每个节点只存储数据元素。</li><li><strong>拓展不方便</strong>：即使采用动态分配的方式实现，拓展长度的时间复杂度也比较高</li><li><strong>删除、插入操作不方便，需要移动大量元素。</strong></li></ol><h3 id="基本操作-静态分配"><a href="#基本操作-静态分配" class="headerlink" title="基本操作(静态分配)"></a>基本操作(静态分配)</h3><p><strong>结构体定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxSize = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> data[MaxSize];  <span class="comment">//用静态的“数组”存放数据元素</span></span><br><span class="line">    <span class="keyword">int</span> length;    <span class="comment">//顺序表的当前长度</span></span><br><span class="line">&#125;SqList; <span class="comment">//顺序表的类型定义</span></span><br></pre></td></tr></table></figure><p><strong>初始化表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//构建一个空的线性表L，分配内存空间</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">InitList</span><span class="params">(&amp;L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; MaxSize; i ++)&#123;</span><br><span class="line">        L.data[i] = <span class="number">0</span>;<span class="comment">//将所有数据元素设置为默认初始值</span></span><br><span class="line">    &#125;</span><br><span class="line">    L.length = <span class="number">0</span>; <span class="comment">//顺序表初始长度为0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插入操作</strong></p><ul><li><strong>注意位序、数组下标的关系,位序 = 数组下标 + 1</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在表L中的第i个位置上插入指定元素e</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(Sqlist &amp;L,<span class="keyword">int</span> i,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L.length + <span class="number">1</span>)<span class="comment">//判断i的范围是否有效</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(L.length &gt;= MaxSize)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//当前存储空间已满，不能插入</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = L.length;j &gt;= i;j--)<span class="comment">//将第i个元素及以后的元素后移</span></span><br><span class="line">        L.data[j] = L.data[j<span class="number">-1</span>];</span><br><span class="line">    L.data[i<span class="number">-1</span>] = e;<span class="comment">//在位置i处放入e</span></span><br><span class="line">    L.length++;<span class="comment">// 长度加1</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度：T = O(n)</strong> </li></ul><p><strong>删除操作</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除表L中的第i个位置的元素，并用引用变量e返回，后续元素依次前移一个位置</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Listdelete</span><span class="params">(SqList &amp;L,<span class="keyword">int</span> i,<span class="keyword">int</span> &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L.length)<span class="comment">//判断i的范围是否有效</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    e = L.data[i<span class="number">-1</span>];<span class="comment">//将被删除的元素赋值给e</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = i;j &lt; L.length; j++)</span><br><span class="line">        L.data[j<span class="number">-1</span>] = L.data[j];</span><br><span class="line">    L.length--;<span class="comment">//线性表长度减1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度：T = O(n)</strong> </li></ul><p><strong>按值查找</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在表L中查找给定元素的位序</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">LocateElem</span><span class="params">(SqList L,<span class="keyword">int</span> e)</span></span>&#123;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; L.length;i++)</span><br><span class="line">       <span class="keyword">if</span>(L.data[i] == e) <span class="keyword">return</span> i+<span class="number">1</span>;<span class="comment">//下标为i的元素值等于e,返回值器位序 i+1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//退出循环，说明查找失败</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度：T = O(n)</strong> </li></ul><p><strong>按位查找</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在表L中查找具有给定位置的元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span>  <span class="title">GetElem</span><span class="params">(SqList L,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(i &lt; <span class="number">1</span> || i &gt; L.length)<span class="comment">//判断i的范围是否有效</span></span><br><span class="line">       <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> L.data[i<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度：T = O(1)</strong> </li></ul><h2 id="链表-链式存储"><a href="#链表-链式存储" class="headerlink" title="链表(链式存储)"></a>链表(链式存储)</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><p><strong>定义</strong>：每个节点除了存放数据元素之外，还要存储指向下一个节点的指针。</p><p>优缺点</p><ul><li>优点：不要求大片连续空间，改变容量方便。</li><li>缺点：不可随机存取，需要耗费一定空间存放指针。</li></ul><h4 id="基本操作-1"><a href="#基本操作-1" class="headerlink" title="基本操作"></a>基本操作</h4><p><strong>结构体定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span><span class="comment">//定义单链表结构点类型</span></span><br><span class="line">    ElemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;LNode,^LinkList;</span><br><span class="line"><span class="comment">//强调这是一个单链表--使用LinkList</span></span><br><span class="line"><span class="comment">//强调这是一个结点 --使用LNode *</span></span><br></pre></td></tr></table></figure><h5 id="不带头节点的单链表"><a href="#不带头节点的单链表" class="headerlink" title="不带头节点的单链表"></a>不带头节点的单链表</h5><p><strong>初始化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L = <span class="literal">NULL</span>;<span class="comment">//空表。暂时还没有任何一个结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判断为空</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插入操作</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在表L中的第i个位置(位序)上插入指定元素e</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i,ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span>)<span class="comment">//i值不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(i == <span class="number">1</span>)&#123;<span class="comment">//插入第1个结点的操作与其他结点操作不同。</span></span><br><span class="line">        LNode *s = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = e;</span><br><span class="line">        s-&gt;next = L;</span><br><span class="line">        L = s;<span class="comment">//头指针指向新节点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    LNode *p;<span class="comment">//指针p指向当前扫描到的节点</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">1</span>;<span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">    p = L;<span class="comment">//L指向第1个结点（不是头结点）</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; j &lt; i<span class="number">-1</span>)&#123;<span class="comment">//循环找到第i-1个结点</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)<span class="comment">//i值不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;<span class="comment">//将结点s连到p之后</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//插入成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="带头节点的单链表"><a href="#带头节点的单链表" class="headerlink" title="带头节点的单链表"></a>带头节点的单链表</h5><p><strong>初始化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//分配一个头节点</span></span><br><span class="line">    <span class="keyword">if</span>(L == <span class="literal">NULL</span>)<span class="comment">//内存不足，分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;<span class="comment">//头节点之后暂时还没有节点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//头结点看成是第0个结点；</span></span><br></pre></td></tr></table></figure><p><strong>判断为空</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插入操作</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在表L中的第i个位置(位序)上插入指定元素e</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListInsert</span><span class="params">(LinkList &amp;L,<span class="keyword">int</span> i,ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span>)<span class="comment">//i值不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p;<span class="comment">//指针p指向当前扫描到的节点</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">    p = L;<span class="comment">//L指向头节点，头结点是第0个结点（不存数据）</span></span><br><span class="line">    <span class="keyword">while</span> (p != <span class="literal">NULL</span> &amp;&amp; j &lt; i<span class="number">-1</span>)&#123;<span class="comment">//循环找到第i-1个结点</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)<span class="comment">//i值不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    s-&gt;data = e;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;<span class="comment">//将结点s连到p之后</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//插入成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>：O(n)</li></ul><p><strong>指定结点的后插操作</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//后插操作：在p结点之后插入元素e</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertNode</span><span class="params">(LNode *p,ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span>( s == <span class="literal">NULL</span>)<span class="comment">//内存分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;data = e;<span class="comment">//用结点s保存数据元素e</span></span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;<span class="comment">//将结点s连接到p之后</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>：O(1)</li></ul><p><strong>指定结点的前插操作</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前插操作：在p结点之后前入元素e</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertNode</span><span class="params">(LNode *p,ElemType e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *s = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">    <span class="keyword">if</span>( s == <span class="literal">NULL</span>)<span class="comment">//内存分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    由于找不到p结点的前一个结点，但为了实现前插操作，这里使用后插操作，将s插入p之后，</span></span><br><span class="line"><span class="comment">    再将s、p的数据进行交换，以达到前插操作的效果</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    p-&gt;next = s;<span class="comment">//将结点s连接到p之后</span></span><br><span class="line">    s-&gt;data = p-&gt;data;<span class="comment">//用s、p交换数据</span></span><br><span class="line">    p-&gt;data = e;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>：O(1)</li></ul><p><strong>按位序删除</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">ListDelete</span><span class="params">(LinkList &amp;L.<span class="keyword">int</span> i,ElemType &amp;e)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *p;<span class="comment">//指针p指向当前扫描的结点</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//当前p指向的是第几个节点</span></span><br><span class="line">    p = L;<span class="comment">//L指向头结点，头节点是第0个结点（不存数据）</span></span><br><span class="line">    <span class="keyword">while</span>( p != <span class="literal">NULL</span> &amp;&amp; j &lt; i<span class="number">-1</span>)&#123;<span class="comment">//循环找到第i-1个结点</span></span><br><span class="line">        p = p-next;</span><br><span class="line">        j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)<span class="comment">//i值不合法</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;next == <span class="literal">NULL</span>)<span class="comment">//第i-1个结点之后已无其他结点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q = p-&gt;next;<span class="comment">//令q指向被删除结点</span></span><br><span class="line">    e = q-&gt;data;<span class="comment">//用e返回元素的值</span></span><br><span class="line">    p-&gt;next = q-next;<span class="comment">//将*q结点从链中“断开”</span></span><br><span class="line">    <span class="built_in">free</span>(q)<span class="comment">//释放结点的存储空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;<span class="comment">//删除成功</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>：O(n)</li></ul><p><strong>删除指定结点p</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这里p结点不能是最后一个结点，否者p-&gt;next = NULL,而p-&gt;next-data就会出现错误</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">DeleteNode</span><span class="params">(LNode *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    LNode *q = p-&gt;next;<span class="comment">//令q指向*p的后继结点</span></span><br><span class="line">    p-&gt;data = p-&gt;next-&gt;data<span class="comment">//和后继结点交换数据域</span></span><br><span class="line">    p-&gt;next = q-&gt;next;<span class="comment">//将*q结点从链中断开</span></span><br><span class="line">    <span class="built_in">free</span>(q)<span class="comment">//释放后继节点的存储空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>：O(1)</li></ul><p><strong>按位查找</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按位查找，返回第i个元素（带头结点）</span></span><br><span class="line"><span class="function">LNode * <span class="title">GetElem</span><span class="params">(LinkList L,<span class="keyword">int</span> i)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    LNode *p;<span class="comment">//指针p指向当前扫描到的结点</span></span><br><span class="line">    <span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//当前p指向的是第几个结点</span></span><br><span class="line">    p = L;<span class="comment">//L指向头结点，头结点是第0个结点（不存数据）</span></span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; j &lt; i)&#123; <span class="comment">// 循环找到第i个结点</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    j++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//i值不合法，则返回一个NULL</span></span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>：O(n)</li></ul><p><strong>按值查找</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//按值查找，找到数据域 == e的结点</span></span><br><span class="line"><span class="function">LNode * <span class="title">LocateElem</span><span class="params">(LinkList L, ElemType e)</span></span>&#123;</span><br><span class="line">    LNode *p = L-&gt;next;</span><br><span class="line">    <span class="comment">//从第1个结点开始查找数据域为e的结点</span></span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span> &amp;&amp; !check(p-data,e))<span class="comment">//check函数：两个ElemType是否相等</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> p;<span class="comment">//找到后返回该结点指针，否则返回NULL</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>：O(n)</li></ul><p><strong>表的长度</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//求表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Length</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">   <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">    LNode *p = L;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)&#123;<span class="comment">//check函数：两个ElemType是否相等</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    len++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>：O(n)</li></ul><h4 id="单链表的建立"><a href="#单链表的建立" class="headerlink" title="单链表的建立"></a>单链表的建立</h4><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol><li>初始化一个单链表</li><li>每次取一个数据元素，插入到表尾/表头</li></ol><h5 id="尾插法"><a href="#尾插法" class="headerlink" title="尾插法"></a>尾插法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//尾插法建立单链表</span></span><br><span class="line"><span class="function">LinkList <span class="title">List_TailInsert</span><span class="params">(LinkList &amp;L)</span></span>&#123;<span class="comment">//正向建立单链表</span></span><br><span class="line">    <span class="keyword">int</span> x;<span class="comment">//设置ElemType为整形</span></span><br><span class="line">    L = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//建立头节点</span></span><br><span class="line">    LNode *s,*r = L;<span class="comment">//r为表尾指针</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);<span class="comment">//输入结点的值</span></span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">9999</span>)&#123;</span><br><span class="line">        s = (LNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        r-&gt;next = s;</span><br><span class="line">        r = s;永远保持r(尾指针)指向最后一个结点</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    r-&gt;next = <span class="literal">NULL</span>;<span class="comment">//尾结点设置为空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>：O(n)</li></ul><h5 id="头插法"><a href="#头插法" class="headerlink" title="头插法"></a>头插法</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">LinkList <span class="title">List_HeadInsert</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">    LNode *s;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    L = (LinkList) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//创建头结点;</span></span><br><span class="line">    L-next = <span class="literal">NULL</span>;<span class="comment">//初始化为空链表</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);<span class="comment">//输入结点的值</span></span><br><span class="line">    <span class="keyword">while</span>(x != <span class="number">9999</span>)&#123;</span><br><span class="line">        s = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//创建新的结点</span></span><br><span class="line">        s.data = x;</span><br><span class="line">        s.next = L-&gt;next;</span><br><span class="line">        L-next = s;<span class="comment">//将新结点插入表中，L为头指针</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><strong>时间复杂度</strong>：O(n)</li><li>应用于链表的逆置</li></ul><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><h4 id="基本操作-2"><a href="#基本操作-2" class="headerlink" title="基本操作"></a>基本操作</h4><p><strong>结构体定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span><span class="comment">//定义双链表结点类型</span></span><br><span class="line">    ELemType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>.*<span class="title">next</span>;</span><span class="comment">//前驱和后继结点</span></span><br><span class="line">&#125;DNode,*DLinklist;</span><br></pre></td></tr></table></figure><p><strong>初始化双链表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitDLinkList</span><span class="params">(DLinkList &amp;L)</span></span>&#123;</span><br><span class="line">L = (DNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));<span class="comment">//分配头结点</span></span><br><span class="line">    <span class="keyword">if</span>(L == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;<span class="comment">//内存不足，分配失败；</span></span><br><span class="line">    L-&gt;prior = <span class="literal">NULL</span>;<span class="comment">//头结点的prior永远指向NULL</span></span><br><span class="line">    L-&gt;next = <span class="literal">NULL</span>;<span class="comment">//头结点之后暂时还没有结点</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为空</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(DNodeList L)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(L-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>插入</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在p结点之后插入s结点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertNextDNode</span><span class="params">(DNode *p,DNode *s)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span> &amp;&amp; s == <span class="literal">NULL</span>)<span class="comment">//非法参数</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    s-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="keyword">if</span>(p-next != <span class="literal">NULL</span>)<span class="comment">//如果p结点有后继结点</span></span><br><span class="line">        p-next-prior = s;</span><br><span class="line">    s-&gt;prior = p;</span><br><span class="line">    p-&gt;next = s;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>删除</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除p结点的后继节点</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InsertNextDNode</span><span class="params">(DNode *p)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)<span class="comment">//非法参数</span></span><br><span class="line">       DNode *q = p-&gt;next;<span class="comment">//找到p的后继节点</span></span><br><span class="line">    <span class="keyword">if</span>(q != <span class="literal">NULL</span>)<span class="comment">//p没有后续结点</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    p-next = q-&gt;next;</span><br><span class="line">   <span class="keyword">if</span>(q-&gt;next != <span class="literal">NULL</span>)<span class="comment">//q结点不是最后一个结点</span></span><br><span class="line">        q-next-prior = p;</span><br><span class="line">    <span class="built_in">free</span>(q);<span class="comment">//释放结点空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><h4 id="循环单链表"><a href="#循环单链表" class="headerlink" title="循环单链表"></a>循环单链表</h4><p><strong>结构体定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span>&#123;</span><span class="comment">//定义单链表结点类型</span></span><br><span class="line">    ElemType data;<span class="comment">//每个节点存放一个数据元素</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">LNode</span> *<span class="title">next</span>;</span><span class="comment">//指针指向下一个节点</span></span><br><span class="line">&#125;LNode,*LinkList;</span><br></pre></td></tr></table></figure><p><strong>初始化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化一个循环单链表</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">L = (LNode *) <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LNode));<span class="comment">//分配一个头结点</span></span><br><span class="line">    <span class="keyword">if</span>(L == <span class="literal">NULL</span>)<span class="comment">//内存不足，分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;next = L;<span class="comment">//头结点next指向头结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判空</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断循环单链表是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L-next == L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>是否达到表尾</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断结点p是否为循环单链表的表尾结点 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isTail</span><span class="params">(LinkList L,LNode *p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L-&gt;next == L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="循环双链表"><a href="#循环双链表" class="headerlink" title="循环双链表"></a>循环双链表</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">表头结点的prior指向表尾结点；</span><br><span class="line">表尾结点的next指向头结点；</span><br></pre></td></tr></table></figure><p><strong>结构体定义</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span>&#123;</span></span><br><span class="line">    ElemType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">DNode</span> *<span class="title">prior</span>,*<span class="title">next</span>;</span></span><br><span class="line">&#125;DNode,*DLinkList;</span><br></pre></td></tr></table></figure><p><strong>初始化</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">InitDLinkList</span><span class="params">(DLinkList &amp;L)</span></span>&#123;</span><br><span class="line">    L = (DNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DNode));<span class="comment">//分配一个头结点</span></span><br><span class="line">    <span class="keyword">if</span>(L == <span class="literal">NULL</span>)<span class="comment">//内存不足，分配失败</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    L-&gt;prior = L;<span class="comment">//头结点的prior指向头结点</span></span><br><span class="line">    L-&gt;next = L;<span class="comment">//头结点的next指向头结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>判空</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断循环双链表是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Empty</span><span class="params">(DLinkList L)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L-next == L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>是否达到表尾</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断结点p是否为循环双链表的表尾结点 </span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isTail</span><span class="params">(DLinkList L,DNode *p)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(L-&gt;next == L)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态链表"><a href="#静态链表" class="headerlink" title="静态链表"></a>静态链表</h3><h4 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h4><ul><li>静态链表借组数组来描述线性表中的链式存储结构。</li><li>分配一整片<strong>连续</strong>的内存空间，各个结点集中安置。</li></ul><p><strong>优缺点</strong></p><ul><li>优点<ul><li>增删操作不需要大量移动元素</li></ul></li><li>缺点<ul><li>不能随机存取</li><li>只能从头结点开始依次往后查找</li><li><font color='red'>容量固定不可变</font></li></ul></li></ul><h2 id="顺序表与链表对比"><a href="#顺序表与链表对比" class="headerlink" title="顺序表与链表对比"></a>顺序表与链表对比</h2><h3 id="逻辑结构"><a href="#逻辑结构" class="headerlink" title="逻辑结构"></a>逻辑结构</h3><ul><li>都属于线性表，都是线性结构</li></ul><h3 id="物理结构-存储结构"><a href="#物理结构-存储结构" class="headerlink" title="物理结构/存储结构"></a>物理结构/存储结构</h3><h4 id="顺序表（顺序存储）-1"><a href="#顺序表（顺序存储）-1" class="headerlink" title="顺序表（顺序存储）"></a>顺序表（顺序存储）</h4><ul><li>优点<ul><li>支持随机存取</li><li>存储密度高</li></ul></li><li>缺点<ul><li>大片连续空间分配不方便</li><li>改变容量不方便</li></ul></li></ul><h4 id="链表（链式存储）"><a href="#链表（链式存储）" class="headerlink" title="链表（链式存储）"></a>链表（链式存储）</h4><ul><li>优点<ul><li>离散的小空间分配方便</li><li>改变容量方便</li></ul></li><li>缺点<ul><li>不可随机存取</li><li>存储密度低</li></ul></li></ul><h3 id="数据的运算-基本操作"><a href="#数据的运算-基本操作" class="headerlink" title="数据的运算/基本操作"></a>数据的运算/基本操作</h3><ul><li><p>按值查找</p><ul><li>顺序表<ul><li>无序——O(n)</li><li>有序——O(log2n)</li></ul></li><li>链表<ul><li>O(n)</li></ul></li></ul></li><li><p>按序查找</p><ul><li>顺序表<ul><li>O(1)</li></ul></li><li>链表<ul><li>O(n)</li></ul></li></ul></li><li><p>插入/删除</p><ul><li>顺序表,<strong>时间开销主要来自于移动元素</strong><ul><li>O(n)</li></ul></li><li>链表<strong>时间开销主要来自于查找元素</strong><ul><li>O(n)</li></ul></li></ul></li></ul><h3 id="如何选择"><a href="#如何选择" class="headerlink" title="如何选择"></a>如何选择</h3><ul><li>表长难以预估、经常要增加/删除元素  ——链表</li><li>表长可估计，查询（搜索）操作比较多  ——顺序表</li></ul><h3 id="开放性问题答题思路"><a href="#开放性问题答题思路" class="headerlink" title="开放性问题答题思路"></a>开放性问题答题思路</h3><p>eg：实现线性表时，用顺序表还是链表好</p><p>：顺序表和链表的<font color='red'>逻辑结构</font>都是线性结构的，都属于线性表。</p><p>但是二者的<font color='red'>存储结构</font>不同，顺序表采用顺序存储….(特点，带来的优缺点)；链表采用链式存储…(特点，导致的优缺点)。</p><p>由于采用不同的存储方式实现，因此<font color='red'>基本操作</font>的实现效率也不同。<font color='red'>当初始化时</font>，…;<font color='red'>当插入数据元素时</font>，…;<font color='red'>当删除数据元素时</font>，…;当<font color='red'>查找一个数据元素时</font>,…;</p>]]></content:encoded>
      
      <comments>http://yoursite.com/posts/40f24371/#disqus_thread</comments>
    </item>
    
    <item>
      <title>高精度运算</title>
      <link>http://yoursite.com/posts/7de295bc/</link>
      <guid>http://yoursite.com/posts/7de295bc/</guid>
      <pubDate>Tue, 22 Jun 2021 04:26:00 GMT</pubDate>
      <description>
      
        高精度加法，高精度减法，大数乘以小数，大数除以小数
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="大整数相加"><a href="#大整数相加" class="headerlink" title="大整数相加"></a>大整数相加</h3><h4 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h4><h5 id="如何存储"><a href="#如何存储" class="headerlink" title="如何存储"></a>如何存储</h5><p>例如存储123456789，我们把每一位都存在数组中,这里我们数组中的第0位存数字9，这是因为两数相加可能会出现进位的现象，倒过来存储方便于加一位。</p><h5 id="运算：模拟人工加法"><a href="#运算：模拟人工加法" class="headerlink" title="运算：模拟人工加法"></a>运算：模拟人工加法</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">      1 2 3</span><br><span class="line">    +   8 9 </span><br><span class="line">    --------</span><br><span class="line">      2 1 2</span><br><span class="line">&#x2F;**</span><br><span class="line">  1、3 + 9 &#x3D; 12 》10.所以进一位</span><br><span class="line">  2、2 + 8 +1 &#x3D; 11 &gt; 10,所以进一位</span><br><span class="line">  3、1 + 1 &#x3D; 2 &lt; 10,所以不进位</span><br><span class="line">**&#x2F;</span><br><span class="line">注意：这里有进位</span><br></pre></td></tr></table></figure><h4 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// C = A + B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || i &lt; B.<span class="built_in">size</span>() ; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i];</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        C.push_back(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (t) C.push_back(t);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><h5 id="高精度加法"><a href="#高精度加法" class="headerlink" title="高精度加法"></a><strong>高精度加法</strong></h5><blockquote><p>给定两个正整数，计算它们的和。</p><p><strong>输入格式</strong></p><p>共两行，每行包含一个整数。</p><p><strong>输出格式</strong></p><p>共一行，包含所求的和。</p><p><strong>数据范围</strong></p><p>1≤整数长度≤1000001≤整数长度≤100000</p><p><strong>输入样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;12</span><br><span class="line">&gt;23</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;35</span><br></pre></td></tr></table></figure></blockquote><p><strong>解答代码</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">add</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="comment">//这里用于存储进位</span></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || i &lt; B.<span class="built_in">size</span>(); i ++)&#123;</span><br><span class="line">        <span class="comment">//每一次计算的结果都是 A[i]+B[i]+t</span></span><br><span class="line">        <span class="keyword">if</span>(i &lt; A.<span class="built_in">size</span>()) t += A[i];</span><br><span class="line">        <span class="keyword">if</span>(i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">        C.push_back(t%<span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里全部都算完后，t！=0时，我们还需要把t放入到最前面</span></span><br><span class="line">    <span class="keyword">if</span>(t) C.push_back(t);</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A,B;</span><br><span class="line">     <span class="comment">//反向存储</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span> ;i &gt;= <span class="number">0</span>; i --) A.push_back(a[i] -<span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span> ;i &gt;= <span class="number">0</span>; i --) B.push_back(b[i] - <span class="string">'0'</span>);</span><br><span class="line">     </span><br><span class="line">    <span class="built_in">vector</span> C = add(A,B);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,C[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大数相减"><a href="#大数相减" class="headerlink" title="大数相减"></a>大数相减</h3><h4 id="运算：模拟人工减法"><a href="#运算：模拟人工减法" class="headerlink" title="运算：模拟人工减法"></a>运算：模拟人工减法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">      1 2 3</span><br><span class="line">    -   8 9 </span><br><span class="line">    --------</span><br><span class="line">        3 4</span><br><span class="line">&#x2F;**</span><br><span class="line">  1、3&lt;9,所以需要向上借位</span><br><span class="line">  2、2 - 1 &lt; 8,所以需要向上借位</span><br><span class="line">  3、1 - 1 ≥ 0,所以不需要向上借位</span><br><span class="line">**&#x2F;</span><br><span class="line">注意：这里有借位</span><br></pre></td></tr></table></figure><h4 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h4><ol><li>为了计算A-B，我们先判断出A，B哪一个数值大，方便计算，并且最高位一定不需要向上借位，这样子就减少了边界情况<ol><li>如果 A &gt; B ，我们就直接A-B</li><li>如果 A &lt; B , 我们就计算 —(A - B);</li></ol></li><li>如果 A[i] - B[i] -t 是否大于等于0<ol><li>大于等于0；就不需要向上借位，直接计算</li><li>小于0，就需要上借位，计算A[i] + 10 - B[i] -t，并且设置 t=0; </li></ol></li></ol><h4 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C = A - B, 满足A &gt;= B, A &gt;= 0, B &gt;= 0</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sub</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t -= B[i];</span><br><span class="line">        C.push_back((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        <span class="keyword">if</span> (t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><h5 id="高精度减法"><a href="#高精度减法" class="headerlink" title="高精度减法"></a>高精度减法</h5><blockquote><p>给定两个正整数，计算它们的差，计算结果可能为负数。</p><p><strong>输入格式</strong></p><p>共两行，每行包含一个整数。</p><p><strong>输出格式</strong></p><p>共一行，包含所求的差。</p><p><strong>数据范围</strong></p><p>1≤整数长度≤1051≤整数长度≤105</p><p><strong>输入样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;32</span><br><span class="line">&gt;11</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;21</span><br></pre></td></tr></table></figure></blockquote><p><strong>答案</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较 A &gt; B的大小</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">com</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A,<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A.<span class="built_in">size</span>() != B.<span class="built_in">size</span>()) <span class="keyword">return</span> A.<span class="built_in">size</span>() &gt; B.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = A.<span class="built_in">size</span>()<span class="number">-1</span>; i &gt;= <span class="number">0</span> ;i--)</span><br><span class="line">        <span class="keyword">if</span>(A[i] != B[i])</span><br><span class="line">            <span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">sub</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;B)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">int</span> len = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="comment">//t表示是否借位</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,t = <span class="number">0</span>; i &lt; len;i++)&#123;</span><br><span class="line">        t = A[i] - t;</span><br><span class="line">        <span class="keyword">if</span>(i &lt; B.<span class="built_in">size</span>()) t = t - B[i];</span><br><span class="line">        C.push_back( (t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(t &lt; <span class="number">0</span>) t = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> t = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//除去前导零</span></span><br><span class="line">    <span class="keyword">while</span>( C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span> ) C.pop_back();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt; a &gt;&gt; b;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A,B;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.<span class="built_in">size</span>()<span class="number">-1</span>;i &gt;= <span class="number">0</span>;i--) A.push_back(a[i] - <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = b.<span class="built_in">size</span>()<span class="number">-1</span>;i &gt;= <span class="number">0</span>;i--) B.push_back(b[i] - <span class="string">'0'</span>);</span><br><span class="line">    <span class="keyword">bool</span> T = com(A,B);</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="keyword">if</span>(com(A,B))&#123;</span><br><span class="line">        C = sub(A,B);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        C = sub(B,A);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"-"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = C.<span class="built_in">size</span>()<span class="number">-1</span>;i &gt;= <span class="number">0</span>;i--)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>,C[i]);</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大数乘以小数"><a href="#大数乘以小数" class="headerlink" title="大数乘以小数"></a>大数乘以小数</h3><h4 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h4><p>这里我们把小数看成一个整体，而不是一位一位乘，这样就不需要考虑加法的运算</p><h4 id="运算：模拟人工乘法"><a href="#运算：模拟人工乘法" class="headerlink" title="运算：模拟人工乘法"></a>运算：模拟人工乘法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">      1 2 3</span><br><span class="line">    *   1 2 </span><br><span class="line">    --------</span><br><span class="line">         </span><br><span class="line">&#x2F;**</span><br><span class="line">1、(3 * 12) % 10 &#x3D; 6</span><br><span class="line">    t &#x3D; (3 * 12) &#x2F;10 &#x3D; 3</span><br><span class="line">    2、(2 * 12 + t) % 10 &#x3D; 7</span><br><span class="line">    t &#x3D; (2 * 12 + t) &#x2F; 10 &#x3D; 2</span><br><span class="line">    3、(1 * 12 + t) % 10 &#x3D; 4</span><br><span class="line">    t &#x3D; (1 * 12 + t) &#x2F; 10 &#x3D; 1</span><br><span class="line">**&#x2F;</span><br><span class="line">注意：这里有进位</span><br></pre></td></tr></table></figure><h4 id="实现代码-1"><a href="#实现代码-1" class="headerlink" title="实现代码"></a>实现代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C = A * b, A &gt;= 0, b &gt;= 0</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">mul</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i ++ )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>()) t += A[i] * b;</span><br><span class="line">        C.push_back(t % <span class="number">10</span>);</span><br><span class="line">        t /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//除去前导0</span></span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目-2"><a href="#题目-2" class="headerlink" title="题目"></a>题目</h4><h5 id="高精度乘法"><a href="#高精度乘法" class="headerlink" title="高精度乘法"></a>高精度乘法</h5><blockquote><p>给定两个正整数 AA 和 BB，请你计算 A×BA×B 的值。</p><p><strong>输入格式</strong></p><p>共两行，第一行包含整数 AA，第二行包含整数 BB。</p><p><strong>输出格式</strong></p><p>共一行，包含 A×BA×B 的值。</p><p><strong>数据范围</strong></p><p>1≤A的长度≤1000001≤A的长度≤100000,<br>0≤B≤100000≤B≤10000</p><p><strong>输入样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;2</span><br><span class="line">&gt;3</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;6</span><br></pre></td></tr></table></figure></blockquote><p><strong>答案</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">mul</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    <span class="comment">//这里是防止出现前导0，如果b=0，那就答案可能出现0000……，我们需要情况讨论，或者在后面处理以下前导0</span></span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">        C.push_back(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> C;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> len = A.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; len;i++)&#123;</span><br><span class="line">        t = A[i] * b + t;</span><br><span class="line">        C.push_back(t%<span class="number">10</span>);</span><br><span class="line">        t = t/<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//这里不能这样写，如果b = 50，A[i] = 9,那这里的t = 45，如果这样子输入，就只能输入4，而不是全部输入，所以我们需要把t循环输入</span></span><br><span class="line">    <span class="comment">//if(t != 0) C.push_back(t%10);</span></span><br><span class="line">    <span class="keyword">while</span>(t)&#123;</span><br><span class="line">        C.push_back(t%<span class="number">10</span>);</span><br><span class="line">        t = t/<span class="number">10</span>;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i-- ) A.push_back(a[i] - <span class="string">'0'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> C = mul(A,b);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i-- ) <span class="built_in">printf</span>(<span class="string">"%d"</span>,C[i]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="大数除以小数"><a href="#大数除以小数" class="headerlink" title="大数除以小数"></a>大数除以小数</h3><h4 id="运算：模拟人工除法"><a href="#运算：模拟人工除法" class="headerlink" title="运算：模拟人工除法"></a>运算：模拟人工除法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">     0 1 1 2</span><br><span class="line">    --------</span><br><span class="line"> 11√ 1 2 3 5</span><br><span class="line">     1</span><br><span class="line">    --------</span><br><span class="line">     1 2</span><br><span class="line">     1 1</span><br><span class="line">     --------</span><br><span class="line">       1 3</span><br><span class="line">       1 1</span><br><span class="line">      -------</span><br><span class="line">         2 5</span><br><span class="line">         2 2</span><br><span class="line">         -----</span><br><span class="line">           3</span><br><span class="line">&#x2F;**</span><br><span class="line">1、r &#x3D; 0 </span><br><span class="line">   (r * 10 +1) &#x2F; 10 &#x3D; 0</span><br><span class="line">       r &#x3D; (r * 10 +1) % 10 &#x3D; 1</span><br><span class="line">    2、(r * 10 +1) &#x2F; 10 &#x3D; 1</span><br><span class="line">       r &#x3D; (r * 10 +1) % 10 &#x3D; 1</span><br><span class="line">    3、(r * 10 +1) &#x2F; 10 &#x3D; 1</span><br><span class="line">       r &#x3D; (r * 10 +1) % 10 &#x3D; 2</span><br><span class="line">    4、(r * 10 +1) &#x2F; 10 &#x3D; 2</span><br><span class="line">       r &#x3D; (r * 10 +1) % 10 &#x3D; 3</span><br><span class="line"> ——————————————————————————————————————————</span><br><span class="line"> 所以答案是 0112，余数为3</span><br></pre></td></tr></table></figure><h4 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// A / b = C ... r, A &gt;= 0, b &gt; 0</span></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">div</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> b, <span class="keyword">int</span> &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">    r = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i -- )</span><br><span class="line">    &#123;</span><br><span class="line">        r = r * <span class="number">10</span> + A[i];</span><br><span class="line">        C.push_back(r / b);</span><br><span class="line">        r %= b;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">    <span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back();</span><br><span class="line">    <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目-3"><a href="#题目-3" class="headerlink" title="题目"></a>题目</h4><h5 id="高精度除法"><a href="#高精度除法" class="headerlink" title="高精度除法"></a>高精度除法</h5><blockquote><p>给定两个非负整数 A，BA，B，请你计算 A/BA/B 的商和余数。</p><p><strong>输入格式</strong></p><p>共两行，第一行包含整数 AA，第二行包含整数 BB。</p><p><strong>输出格式</strong></p><p>共两行，第一行输出所求的商，第二行输出所求余数。</p><p><strong>数据范围</strong></p><p>1≤A的长度≤1000001≤A的长度≤100000,<br>1≤B≤100001≤B≤10000,<br>BB 一定不为 00</p><p><strong>输入样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;7</span><br><span class="line">&gt;2</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;3</span><br><span class="line">&gt;1</span><br></pre></td></tr></table></figure></blockquote><p><strong>解答</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; <span class="title">div</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A,<span class="keyword">int</span> b,<span class="keyword">int</span> &amp;r)</span></span>&#123;</span><br><span class="line">   r = <span class="number">0</span>;</span><br><span class="line">   <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; C;</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = A.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">       r = r*<span class="number">10</span>+A[i];</span><br><span class="line">       C.push_back(r/b);</span><br><span class="line">       r = r%b;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   由于下面输入方式是从后往前面输出，而这里我们得到的真正的数值，如 0001111类型的，所以我们需要反转vector</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">   reverse(C.<span class="built_in">begin</span>(),C.<span class="built_in">end</span>());</span><br><span class="line">   <span class="comment">//除去前导零</span></span><br><span class="line">   <span class="keyword">while</span>(C.<span class="built_in">size</span>()&gt;<span class="number">1</span> &amp;&amp; C.back() == <span class="number">0</span>) C.pop_back();</span><br><span class="line">   <span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> a;</span><br><span class="line">    <span class="keyword">int</span> b;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = a.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i-- ) A.push_back(a[i] - <span class="string">'0'</span>);</span><br><span class="line">    <span class="comment">//r为余数</span></span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="keyword">auto</span> C = div(A,b,r);</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = C.<span class="built_in">size</span>()<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i-- ) <span class="built_in">printf</span>(<span class="string">"%d"</span>,C[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n%d"</span>,r);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/posts/7de295bc/#disqus_thread</comments>
    </item>
    
    <item>
      <title>二分</title>
      <link>http://yoursite.com/posts/9947c71c/</link>
      <guid>http://yoursite.com/posts/9947c71c/</guid>
      <pubDate>Sat, 19 Jun 2021 14:53:45 GMT</pubDate>
      <description>
      
        整数二分与浮点数二分
      
      </description>
      
      
      <content:encoded><![CDATA[<blockquote><p><strong>单调性的题目一定可以二分，可以的二分的题目不一定由单调性</strong></p><p>二分一定是有解的，如果出现无解的情况，一定是题目的问题，而不是模板的问题</p></blockquote><h3 id="整数二分"><a href="#整数二分" class="headerlink" title="整数二分"></a>整数二分</h3><p>思想：整个区间可以一分为二，一边区间都满足某一条件，另一区间都不满足某一条件，而新边界的选择</p><ul><li><font color='red'>新的边界可以设置为不满足条件区间的最大值（1）</font></li><li><font color='cornflowerblue'>新的边界设置设置为满足条件区间的最小值（2）</font></li></ul><p>两种情况对应两种不同的模板。</p><p><strong>模板的选择主要看check函数中ture&amp;false区间的划分，如果l=mid，就选择第一个模板，如果r=mid，就选择第二个模板</strong></p><h4 id="第一种模拟模板"><a href="#第一种模拟模板" class="headerlink" title="第一种模拟模板"></a><font color='red'>第一种模拟模板</font></h4><h5 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h5><ol><li>mid = （l+r<strong>+1</strong>）/2</li><li>if(check(mid))<ol><li>true —&gt;[mid,r]</li><li>false –&gt;[l,mid-1]</li></ol></li></ol><h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">这里为什么要mid算式中要加一</span><br><span class="line">例子：</span><br><span class="line">如果 </span><br><span class="line">l&#x3D;r-1</span><br><span class="line">初始化区间[l,r]</span><br><span class="line">mid &#x3D; l</span><br><span class="line">check(mid) ---&gt;true ---&gt; [l.r] ---&gt;死循环！！！</span><br></pre></td></tr></table></figure><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid - 1]和[mid, r]时使用：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="第二种模拟模板"><a href="#第二种模拟模板" class="headerlink" title="第二种模拟模板"></a><strong><font color='cornflowerblue'>第二种模拟模板</font></strong></h4><h5 id="步骤-1"><a href="#步骤-1" class="headerlink" title="步骤"></a><strong>步骤</strong></h5><ol><li>mid = （l+r）/2</li><li>if(check(mid))<ol><li>true —&gt;[l,mid]</li><li>false –&gt;[mid+1,r]</li></ol></li></ol><h5 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h5><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 区间[l, r]被划分成[l, mid]和[mid + 1, r]时使用：</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bsearch_1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">while</span> (l &lt; r)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) r = mid;    <span class="comment">// check()判断mid是否满足性质</span></span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><h5 id="数的范围"><a href="#数的范围" class="headerlink" title="数的范围"></a><strong>数的范围</strong></h5><blockquote><p>给定一个按照升序排列的长度为 nn 的整数数组，以及 qq 个查询。</p><p>对于每个查询，返回一个元素 kk 的起始位置和终止位置（位置从 00 开始计数）。</p><p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><p><strong>输入格式</strong></p><p>第一行包含整数 nn 和 qq，表示数组长度和询问个数。</p><p>第二行包含 nn 个整数（均在 1∼100001∼10000 范围内），表示完整数组。</p><p>接下来 qq 行，每行包含一个整数 kk，表示一个询问元素。</p><p><strong>输出格式</strong></p><p>共 qq 行，每行包含两个整数，表示所求元素的起始位置和终止位置。</p><p>如果数组中不存在该元素，则返回 <code>-1 -1</code>。</p><p><strong>数据范围</strong></p><p>1≤n≤1000001≤n≤100000<br>1≤q≤100001≤q≤10000<br>1≤k≤100001≤k≤10000</p><p><strong>输入样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;6 3</span><br><span class="line">&gt;1 2 2 3 3 4</span><br><span class="line">&gt;3</span><br><span class="line">&gt;4</span><br><span class="line">&gt;5</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt;3 4</span><br><span class="line">&gt;5 5</span><br><span class="line">&gt;-1 -1</span><br></pre></td></tr></table></figure></blockquote><p><strong>答案</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="keyword">int</span> q[N];</span><br><span class="line"><span class="keyword">int</span> n,m,num;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l,r,mid;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; n ; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q[i]);</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;num);</span><br><span class="line">        l = <span class="number">0</span>,r = n<span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">            mid = l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(q[mid] &gt;= num) r = mid;</span><br><span class="line">            <span class="keyword">else</span> l = mid+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(q[l] != num) </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1 -1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d "</span>,l);</span><br><span class="line">            l = mid,r = n<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">while</span>(l &lt; r)&#123;</span><br><span class="line">                mid = l+r+<span class="number">1</span>&gt;&gt;<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(q[mid] &lt;= num) l = mid;</span><br><span class="line">                <span class="keyword">else</span> r = mid<span class="number">-1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d \n"</span>,l);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="浮点数二分"><a href="#浮点数二分" class="headerlink" title="浮点数二分"></a>浮点数二分</h3><p>由于浮点数二分不存在边界问题，所以代码实现简单</p><h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;<span class="comment">/* ... */</span>&#125; <span class="comment">// 检查x是否满足某种性质</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">bsearch_3</span><span class="params">(<span class="keyword">double</span> l, <span class="keyword">double</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-6</span>;   <span class="comment">// eps 表示精度，取决于题目对精度的要求</span></span><br><span class="line">    <span class="keyword">while</span> (r - l &gt; eps)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (check(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><h5 id="数的三次方根"><a href="#数的三次方根" class="headerlink" title="数的三次方根"></a>数的三次方根</h5><blockquote><p>给定一个浮点数 nn，求它的三次方根。</p><p><strong>输入格式</strong></p><p>共一行，包含一个浮点数 nn。</p><p><strong>输出格式</strong></p><p>共一行，包含一个浮点数，表示问题的解。</p><p>注意，结果保留 66 位小数。</p><p><strong>数据范围</strong></p><p>−10000≤n≤10000−10000≤n≤10000</p><p><strong>输入样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;1000.00</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;10.000000</span><br></pre></td></tr></table></figure></blockquote><p><strong>答案</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cube_root</span><span class="params">(<span class="keyword">double</span> num)</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> l,r;</span><br><span class="line">    <span class="keyword">if</span>(num &gt;= <span class="number">1</span>)</span><br><span class="line">        l = <span class="number">0</span>,r = num;</span><br><span class="line">    <span class="keyword">else</span> <span class="comment">//当num&lt;1时，我们要的答案就在num~1之间，而不是0~num</span></span><br><span class="line">        l = num,r = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>( r-l &gt; <span class="number">1e-8</span>)&#123;</span><br><span class="line">        <span class="keyword">double</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>( mid*mid*mid &gt; num) r =mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">double</span> num,result;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf"</span>,&amp;num);</span><br><span class="line">    <span class="comment">//保证进入到cube_root的值非负数</span></span><br><span class="line">    <span class="keyword">if</span>(num &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        result = cube_root(num);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lf"</span>,result);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(num &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        result = cube_root(num * <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lf"</span>,result*<span class="number">-1</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>http://yoursite.com/posts/9947c71c/#disqus_thread</comments>
    </item>
    
    <item>
      <title>排序</title>
      <link>http://yoursite.com/posts/a444b428/</link>
      <guid>http://yoursite.com/posts/a444b428/</guid>
      <pubDate>Fri, 18 Jun 2021 13:37:13 GMT</pubDate>
      <description>
      
        快速排序和归并排序
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><h4 id="主要思想-分治"><a href="#主要思想-分治" class="headerlink" title="主要思想:分治"></a>主要思想:分治</h4><p><strong>特点</strong></p><ul><li>是不稳定的</li><li><strong>时间复杂度：nlogn</strong></li></ul><p><strong>实现步骤：</strong></p><ol><li>确定分界点x，x可以取以下四类值<ol><li>q[l]</li><li>q[(l+r)/2]</li><li>q[r]</li><li>随机</li></ol></li><li><strong>调整区间</strong>：第一个区间的数都小于等于x，第二个区间的数都大于等于x；</li><li>递归处理左右两个区间</li></ol><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断边界，当数组内没有值或者只有一个值时，直接返回。</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//分界点：x取中间值,保证不能取到q[r]</span></span><br><span class="line">    x = q[l + r &gt;&gt; <span class="number">1</span>];</span><br><span class="line">    <span class="comment">//i，j取两侧值，当指针调整的时候，方便循环</span></span><br><span class="line">    <span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//i指针往后移动，找到数组中大于x的值，停止</span></span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="comment">//找到数组中小于x的值，停止</span></span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="comment">//如果两个指针还没有相遇，就交换值</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归处理左右两端</span></span><br><span class="line">    </span><br><span class="line">    quick_sort(q, l, j);</span><br><span class="line">    quick_sort(q, j + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断边界，当数组内没有值或者只有一个值时，直接返回。</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//分界点：x取中间值，这里需要向上取整，否则会出现死循环</span></span><br><span class="line">     x = q[l + r + <span class="number">1</span> &gt;&gt; <span class="number">1</span>];<span class="comment">//或者x = q[r];</span></span><br><span class="line">    <span class="comment">//i，j取两侧值，当指针调整的时候，方便循环</span></span><br><span class="line">    <span class="keyword">int</span> i = l - <span class="number">1</span>, j = r + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt; j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//i指针往后移动，找到数组中大于x的值，停止</span></span><br><span class="line">        <span class="keyword">do</span> i ++ ; <span class="keyword">while</span> (q[i] &lt; x);</span><br><span class="line">        <span class="comment">//找到数组中小于x的值，停止</span></span><br><span class="line">        <span class="keyword">do</span> j -- ; <span class="keyword">while</span> (q[j] &gt; x);</span><br><span class="line">        <span class="comment">//如果两个指针还没有相遇，就交换值</span></span><br><span class="line">        <span class="keyword">if</span> (i &lt; j) swap(q[i], q[j]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//递归处理左右两端</span></span><br><span class="line">    </span><br><span class="line">    quick_sort(q, l, i<span class="number">-1</span>);</span><br><span class="line">    quick_sort(q, i, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">例如q【1，2】</span></span><br><span class="line"><span class="comment">x=1，</span></span><br><span class="line"><span class="comment">初始：quick_sort(q, 0,1);</span></span><br><span class="line"><span class="comment">第一步： q[i] = 1，q[j]=2;这里q[i]&lt;x,i不移动，q[j]&gt;x,j向左移动一位</span></span><br><span class="line"><span class="comment">（i=0，j=0）</span></span><br><span class="line"><span class="comment">左边：quick_sort(q, 0, -1);结束</span></span><br><span class="line"><span class="comment">右边：quick_sort(q, 0,1);死循环</span></span><br><span class="line"><span class="comment">第二步：</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><blockquote><p>给定一个长度为 nn 的整数数列，以及一个整数 kk，请用快速选择算法求出数列从小到大排序后的第 kk 个数。</p><p><strong>输入格式</strong></p><p>第一行包含两个整数 nn 和 kk。</p><p>第二行包含 nn 个整数（所有整数均在 1∼1091∼109 范围内），表示整数数列。</p><p><strong>输出格式</strong></p><p>输出一个整数，表示数列的第 kk 小数。</p><p><strong>数据范围</strong></p><p>1≤n≤1000001≤n≤100000,<br>1≤k≤n1≤k≤n</p><p><strong>输入样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;5 3</span><br><span class="line">&gt;2 4 1 5 3</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;3</span><br></pre></td></tr></table></figure><p><strong>答案</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">100010</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">int</span> n,k;</span><br><span class="line">&gt;<span class="keyword">int</span> q[N];</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="keyword">void</span> <span class="title">quick_sort</span><span class="params">(<span class="keyword">int</span> q[],<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">int</span> i = l<span class="number">-1</span>,j = r + <span class="number">1</span>,num = q[(l+r)&gt;&gt;<span class="number">1</span>];</span><br><span class="line">   <span class="keyword">while</span>(i&lt;j)&#123;</span><br><span class="line">       <span class="keyword">do</span> i++; <span class="keyword">while</span>(q[i] &lt; num);</span><br><span class="line">       <span class="keyword">do</span> j--; <span class="keyword">while</span>(q[j] &gt; num);</span><br><span class="line">       <span class="keyword">if</span>(i&lt;j) swap(q[i],q[j]);</span><br><span class="line">   &#125;</span><br><span class="line">   quick_sort(q,l,j),quick_sort(q,j+<span class="number">1</span>,r);</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;k);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;q[i]);</span><br><span class="line">   quick_sort(q,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%d"</span>,q[k<span class="number">-1</span>]);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><h4 id="主要思想：分治"><a href="#主要思想：分治" class="headerlink" title="主要思想：分治"></a>主要思想：分治</h4><p><strong>特点</strong>：</p><ul><li>稳定的</li><li><strong>时间复杂度：nlogn</strong></li></ul><p><strong>实现步骤</strong>：</p><ol><li>确定分界点，mid = （l+r）/ 2</li><li>递归排序left，right</li><li><strong>归并—-合二为一</strong><ol><li>两个数组都是排好序的</li><li>两个指针指向左右两数组的第一个值，两值进行比较，小的值填入新数组的第一个值同时该指针往后移动（当两值相等时，往往把第一数组的值放在新数组中）</li><li>两值继续进行比较，小的值填入新数组的第二个值同时该指针往后移动，递归</li><li>直到某一个数组结束，另一个数组还没有结束，我们把这个数组余下的值继续填入。</li></ol></li></ol><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> q[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//判断边界，当数组内没有值或者只有一个值时，直接返回。</span></span><br><span class="line">    <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line"><span class="comment">//确定中点</span></span><br><span class="line">    <span class="keyword">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//递归排序</span></span><br><span class="line">    merge_sort(q, l, mid);</span><br><span class="line">    merge_sort(q, mid + <span class="number">1</span>, r);</span><br><span class="line"><span class="comment">// tmp--》辅助数组</span></span><br><span class="line">    <span class="keyword">int</span> k = <span class="number">0</span>, i = l, j = mid + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">        <span class="keyword">if</span> (q[i] &lt;= q[j]) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">        <span class="keyword">else</span> tmp[k ++ ] = q[j ++ ];</span><br><span class="line"><span class="comment">//将剩余值填入</span></span><br><span class="line">    <span class="keyword">while</span> (i &lt;= mid) tmp[k ++ ] = q[i ++ ];</span><br><span class="line">    <span class="keyword">while</span> (j &lt;= r) tmp[k ++ ] = q[j ++ ];</span><br><span class="line"><span class="comment">//将辅助数组的数复制到原数组中</span></span><br><span class="line">    <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++ ) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="题目-1"><a href="#题目-1" class="headerlink" title="题目"></a>题目</h4><blockquote><p>给定一个长度为 nn 的整数数列，请你计算数列中的逆序对的数量。</p><p>逆序对的定义如下：对于数列的第 ii 个和第 jj 个元素，如果满足 i&lt;ji&lt;j 且 a[i]&gt;a[j]a[i]&gt;a[j]，则其为一个逆序对；否则不是。</p><p><strong>输入格式</strong></p><p>第一行包含整数 nn，表示数列的长度。</p><p>第二行包含 nn 个整数，表示整个数列。</p><p><strong>输出格式</strong></p><p>输出一个整数，表示逆序对的个数。</p><p><strong>数据范围</strong></p><p>1≤n≤1000001≤n≤100000</p><p><strong>输入样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;6</span><br><span class="line">&gt;2 3 4 5 6 1</span><br></pre></td></tr></table></figure><p><strong>输出样例：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt;5</span><br></pre></td></tr></table></figure><p><strong><font color='red'>答案</font></strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&gt;<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line">&gt;<span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line">&gt;<span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line">&gt;<span class="keyword">int</span> arr[N];</span><br><span class="line">&gt;<span class="keyword">int</span> temp[N];</span><br><span class="line">&gt;<span class="keyword">int</span> n;</span><br><span class="line">&gt;<span class="keyword">unsigned</span> <span class="keyword">long</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="keyword">void</span> <span class="title">merge_sort</span><span class="params">(<span class="keyword">int</span> arr[], <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function">&gt;</span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">   <span class="keyword">int</span> mid = ( l + r  ) / <span class="number">2</span>;</span><br><span class="line">   merge_sort(arr, l, mid);</span><br><span class="line">   merge_sort(arr, mid + <span class="number">1</span>, r);</span><br><span class="line">   </span><br><span class="line">   <span class="keyword">int</span> k=<span class="number">0</span>,i=l,j=mid+<span class="number">1</span>;</span><br><span class="line">   <span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="keyword">if</span>(arr[i] &lt;= arr[j])</span><br><span class="line">       &#123;</span><br><span class="line">           temp[k++] = arr[i++];</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           temp[k++] = arr[j++];</span><br><span class="line">           num += (mid - i + <span class="number">1</span>);<span class="comment">//注意这里，是直接加的，后面的不需要比较了。</span></span><br><span class="line">       &#125; </span><br><span class="line">   &#125; </span><br><span class="line">   <span class="keyword">while</span> ( i &lt;= mid )</span><br><span class="line">   &#123;</span><br><span class="line">       temp[k++] = arr[i++];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">while</span> ( j &lt;= r )</span><br><span class="line">   &#123;</span><br><span class="line">       temp[k++] = arr[j++];</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span> (i = l, j = <span class="number">0</span>; i &lt;= r; i ++, j ++)</span><br><span class="line">   &#123;</span><br><span class="line">       arr[i] = temp[j];</span><br><span class="line">   &#125;</span><br><span class="line">&gt;&#125;</span><br><span class="line"></span><br><span class="line">&gt;<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">   &#123;</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;arr[i]);</span><br><span class="line">   &#125;</span><br><span class="line">   merge_sort(arr, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">"%ld"</span>,num);</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&gt;&#125;</span><br></pre></td></tr></table></figure></blockquote>]]></content:encoded>
      
      <comments>http://yoursite.com/posts/a444b428/#disqus_thread</comments>
    </item>
    
    <item>
      <title>数据结构概念</title>
      <link>http://yoursite.com/posts/9aeff161/</link>
      <guid>http://yoursite.com/posts/9aeff161/</guid>
      <pubDate>Fri, 18 Jun 2021 01:26:06 GMT</pubDate>
      <description>
      
        xxx
      
      </description>
      
      
      <content:encoded><![CDATA[<h2 id="数据结构学什么"><a href="#数据结构学什么" class="headerlink" title="数据结构学什么"></a>数据结构学什么</h2><ul><li>如何利用程序代码把现实世界的问题<strong>信息化</strong></li><li>如何用计算机高效地处理这些信息从而创造价值</li></ul><blockquote><p><strong>“唯一可以确定的是，明天会使我们所有人大吃一惊”</strong></p></blockquote><h2 id="数据结构基本概念"><a href="#数据结构基本概念" class="headerlink" title="数据结构基本概念"></a>数据结构基本概念</h2><h3 id="数据等基本概念"><a href="#数据等基本概念" class="headerlink" title="数据等基本概念"></a>数据等基本概念</h3><p><strong>数据</strong>： 是<font color='red'>信息的载体</font>,是描述客观事物的数、字符以及所有能输入到计算机中并<font color='red'>被计算机程序识别和处理</font>的符号的集合。数据是计算机程序加工的原料。</p><p>现代计算机— 经常处理<font color='red'>非数值型</font>问题</p><p>对于非数值型问题</p><ul><li>我们关心每个个体的具体信息</li><li>我们还关心个体之间的关系</li></ul><p><strong>数据元素</strong>：描述一个个体的具体信息，是<font color='red'>数据的基本单位</font>，通常作为一个整体进行考虑和处理，一个数据元素可由锘若干<font color='red'>数据项</font>组成</p><p><strong>数据项</strong>：构成数据元素的<font color='red'>不可分割的最小单位</font>。 </p><p><strong>数据对象</strong>：是具有<font color='red'>相同性质</font>的数据元素的集合，是数据的一个子集。</p><p><strong>数据结构</strong>：是相互之间存在一种或多种特定<font color='red'>关系</font>的数据元素的集合。</p><ul><li><strong>同一个数据对象里的数据元素，可以根据关系的不同，组成不同的数据结构</strong></li><li><strong>不同的数据元素，可以组成相同的数据结构</strong></li></ul><h3 id="数据结构的三要素"><a href="#数据结构的三要素" class="headerlink" title="数据结构的三要素"></a>数据结构的三要素</h3><h4 id="逻辑关系"><a href="#逻辑关系" class="headerlink" title="逻辑关系"></a>逻辑关系</h4><p><strong>集合结构</strong></p><p><strong>线性结构（一对一）</strong></p><ul><li>数据元素之间都是一对一的关系</li><li>除了第一个元素，所有元素都有唯一的前驱</li><li>除了最后一个元素，所有的元素都有唯一的后继</li></ul><p><strong>树形结构（一对多）</strong></p><p><strong>图壮结构（多对多）</strong></p><h4 id="数据的运算"><a href="#数据的运算" class="headerlink" title="数据的运算"></a>数据的运算</h4><ul><li>针对某种逻辑结构，结合实际需求，定义<font color='red'>基本运算</font>。</li></ul><p><strong>逻辑关系和数据的运算<font color='red'>定义</font>了一种数据结构</strong></p><h4 id="物理结构（存储结构）"><a href="#物理结构（存储结构）" class="headerlink" title="物理结构（存储结构）"></a>物理结构（存储结构）</h4><p><strong>如何用计算机实现数据结构</strong></p><ul><li>顺序存储<ul><li><font color='red'>把逻辑上相邻的元素存储在物理位置上也相邻的存储单位中</font>，元素之间的关系由存储单元的邻接关系来体现。</li></ul></li><li>链式存储<ul><li><font color='red'>逻辑上相邻的元素在物理位置上可以不相邻</font>，借助指示元素存储地址的指针来表示元素之间的逻辑关系。</li></ul></li><li>索引存储<ul><li>在存储元素信息的同时，还建立附加的<strong>索引表</strong>。索引表中的每项称为索引项，索引项的一般形式是（<strong>关键字，地址</strong>）。</li></ul></li><li>散列存储<ul><li>根据元素的<strong>关键字</strong>直接计算出该元素的存储地址，又称为<font color='red'>哈希（Hash）存储</font>。</li></ul></li></ul><blockquote><p>1、若采用<font color='red'>顺序存储</font>，则各个数据元素在物理上必须是<font color='red'>连续的</font>；<br>     若采用<font color='red'>非顺序存储</font>，则各个数据元素在物理上可以是<font color='red'>离散的</font>；</p><p>2、数据的<font color='red'>存储结构</font>会<font color='red'>影响存储空间分配的方便程度</font>。</p><p>3、数据的<font color='red'>存储结构</font>会<font color='red'>影响对数据运算的速度</font>。</p></blockquote><blockquote><p>1、<font color='red'>运算的定义</font>是针对逻辑结构的，指出运算的功能；</p><p>2、<font color='red'>运算的实现</font>是<font color='red'>针对存储结构</font>的，指出运算的具体操作步骤</p></blockquote><h4 id="数据类型、抽象数据类型"><a href="#数据类型、抽象数据类型" class="headerlink" title="数据类型、抽象数据类型"></a>数据类型、抽象数据类型</h4><p><strong>数据类型</strong>：是一个值的集合和定义在此集合上的一组操作的总称</p><ul><li>原子类型：其值不可再分的数据结构。（例如：基本类型，如int、bool）</li><li>结构类型：其值可以在分解为若干分量（成分）的数据类型。（例如：结构体）</li></ul><p><strong>抽象数据类型</strong>：是抽象数据组织以及与之相关的操作</p><h2 id="算法的基本概念"><a href="#算法的基本概念" class="headerlink" title="算法的基本概念"></a>算法的基本概念</h2><h3 id="什么是算法"><a href="#什么是算法" class="headerlink" title="什么是算法"></a>什么是算法</h3><p><strong>程序 = 数据结构 + 算法</strong></p><p><strong>算法</strong>：是对<font color='red'>特定问题求解步骤的一种描述</font>，它是指令的<font color='red'>有限</font>序列，其中的苗条指令表示一个或多个操作</p><h3 id="算法的五个特征"><a href="#算法的五个特征" class="headerlink" title="算法的五个特征"></a>算法的五个特征</h3><ol><li><strong>有穷性</strong>：一个算法必须总在执行<strong>有穷步之后结束</strong>，且每一步都可在在有穷时间内完成<ul><li><font color='orange'>算法</font>必须是<font color='red'>有穷的</font>，而<font color='orange'>程序</font>可以是<font color='red'>无穷的</font></li></ul></li><li><strong>确定性</strong>：算法中每条指令必须有确切的含义，对于<font color='red'>相同的输入</font>只能得出<font color='red'>相同的输出</font>。</li><li><strong>可行性</strong>：算法中描述的操作都可以通过已经实现的<font color='red'>基本运算执行有限次</font>来实现。</li><li><strong>输入</strong>：一个算法有<font color='red'>零个或多个输入</font>，这些输入取自于某个特定的对象的集合。</li><li><strong>输出</strong>：一个算法有<font color='red'>一个或多个输出</font>，这些输出是与输入有着某种特定关系的量。</li></ol><h3 id="“好”算法的特质"><a href="#“好”算法的特质" class="headerlink" title="“好”算法的特质"></a>“好”算法的特质</h3><ol><li><strong>正确性</strong>：算法应该能正确地解决求解问题。</li><li><strong>可读性</strong>：算法应该具有良好的可读性，以帮助人们理解</li><li><strong>健壮性</strong>：输入非法数据时，算法能适当地做出反应或进行处理，而不会产生莫名其妙的输出结果。</li><li><font color='red'>高效率</font>与<font color='red'>低存储需求</font><ul><li>高效率：花的时间少，时间复杂度低</li><li>低存储需求：不费内存，空间复杂度低。</li></ul></li></ol>]]></content:encoded>
      
      <comments>http://yoursite.com/posts/9aeff161/#disqus_thread</comments>
    </item>
    
    <item>
      <title>中断-异常</title>
      <link>http://yoursite.com/posts/a76ffb5a/</link>
      <guid>http://yoursite.com/posts/a76ffb5a/</guid>
      <pubDate>Sun, 27 Dec 2020 02:52:58 GMT</pubDate>
      <description>
      
        了解中断的作用，中断是用户态切换到核心的唯一方式。中断的几种类别。
      
      </description>
      
      
      <content:encoded><![CDATA[<h3 id="一、中断机制的诞生"><a href="#一、中断机制的诞生" class="headerlink" title="一、中断机制的诞生"></a>一、中断机制的诞生</h3><ul><li><p>在单批道处理阶段，各个程序只能串行处理，系统资利用低，为了解决上诉问题，人们发明了操作系统（作为管理者），引入中断机制，实现了多道程序并发执行</p></li><li><p><strong>本质：发生中断就意味着需要操作系统介入，开展管理工作</strong></p></li></ul><h3 id="二、中断的概念和作业"><a href="#二、中断的概念和作业" class="headerlink" title="二、中断的概念和作业"></a>二、中断的概念和作业</h3><h4 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h4><ul><li>当中断发生时，CPU立即进入<strong>核心态</strong></li><li>当中断发生后，当前运行的进程暂停运行，并由操作系统内核对中断进行处理</li><li>对于不同的中断信号，会进行不同的处理</li></ul><h4 id="2、中断的作用"><a href="#2、中断的作用" class="headerlink" title="2、中断的作用"></a>2、中断的作用</h4><p>​    发生了中断，就意味着需要操作系统介入，发展管理工作。由于操作系统的管理工作（比如进程切换、分配I/O设备等）需要使用特权指令，因此CPU需要从用户态转变成核心态。<strong>中断</strong>可以<strong>使CPU从用户态转变成核心态，使操作系统获得计算机的控制权</strong>.。有了中断，才能实现多道程序并发执行。</p><h4 id="3、用户态、核心态切换的实现"><a href="#3、用户态、核心态切换的实现" class="headerlink" title="3、用户态、核心态切换的实现"></a>3、用户态、核心态切换的实现</h4><ul><li><strong>“用户态—》核心态“</strong>是通过<strong>中断</strong>实现的。并且<strong>中断</strong>是<strong>唯一的</strong>方式</li><li>”核心态—》用户态“的切换是通过<strong>执行一个特权指令</strong>，将程序状态字（PSW）的标志位设置为”用户态“</li></ul><h3 id="三、中断-广义的中断-分类"><a href="#三、中断-广义的中断-分类" class="headerlink" title="三、中断{广义的中断}分类"></a>三、中断{广义的中断}分类</h3><h4 id="1、内中断（异常、例外、陷入）"><a href="#1、内中断（异常、例外、陷入）" class="headerlink" title="1、内中断（异常、例外、陷入）"></a>1、内中断（异常、例外、陷入）</h4><ul><li><p>信号来源：CPU内部与当前执行的指令<strong>有关</strong></p></li><li><p>自愿中断</p><ul><li>指令中断</li></ul></li><li><p>强迫中断</p><ul><li>硬件故障</li><li>软件中断</li></ul></li></ul><h4 id="2、外中断（中断-狭义的中断-）"><a href="#2、外中断（中断-狭义的中断-）" class="headerlink" title="2、外中断（中断{狭义的中断}）"></a>2、外中断（中断{狭义的中断}）</h4><ul><li><p>信号来源：CPU内部与当前执行的指令<strong>有关</strong></p></li><li><p>外设请求</p></li><li><p>人工干预</p></li></ul><h3 id="四、外中断的处理过程"><a href="#四、外中断的处理过程" class="headerlink" title="四、外中断的处理过程"></a>四、外中断的处理过程</h3><p><img src="https://i.loli.net/2020/12/15/N1OuBLW9Zj7YbAy.png" alt="image-20201215203027037"></p><h3 id="五、回顾"><a href="#五、回顾" class="headerlink" title="五、回顾"></a>五、回顾</h3><p><img src="https://i.loli.net/2020/12/15/OEjrGxoAeT5cUM4.png" alt="image-20201215203338519"></p>]]></content:encoded>
      
      <comments>http://yoursite.com/posts/a76ffb5a/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
